---
import BaseLayout from './BaseLayout.astro';
import Header from '@/components/layout/Header.astro';
import Footer from '@/components/layout/Footer.astro';
import { SITE_CONFIG, generateBreadcrumbSchema } from '@/utils/seo';

export interface Props {
  title: string;
  description: string;
  pubDate: Date;
  updatedDate?: Date;
  author?: string;
  tags?: string[];
  heroImage?: string;
  heroImageAlt?: string;
  draft?: boolean;
}

const {
  title,
  description,
  pubDate,
  updatedDate,
  author = SITE_CONFIG.author.name,
  tags = [],
  heroImage,
  heroImageAlt,
  draft = false,
} = Astro.props;

// Generate breadcrumbs for blog posts
const breadcrumbs = [
  { name: 'Home', url: Astro.site?.toString() || SITE_CONFIG.url },
  { name: 'Blog', url: new URL('/blog', Astro.site || SITE_CONFIG.url).toString() },
  { name: title, url: new URL(Astro.url.pathname, Astro.site || SITE_CONFIG.url).toString() },
];

const breadcrumbSchema = generateBreadcrumbSchema(breadcrumbs);

// Format dates for SEO
const publishedTime = pubDate.toISOString();
const modifiedTime = updatedDate?.toISOString();

// Use hero image or default
const seoImage = heroImage || SITE_CONFIG.defaultImage;
const seoImageAlt = heroImageAlt || `${title} - ${SITE_CONFIG.name}`;

// Calculate reading time (approximate)
const content = await Astro.slots.render('default');
const wordCount = content.replace(/<[^>]*>/g, '').split(/\s+/).filter(word => word.length > 0).length;
const readingTime = Math.ceil(wordCount / 200); // Assuming 200 words per minute
---

<BaseLayout 
  title={title}
  description={description}
  image={seoImage}
  imageAlt={seoImageAlt}
  type="article"
  publishedTime={publishedTime}
  modifiedTime={modifiedTime}
  author={author}
  tags={tags}
  noindex={draft}
>
  <!-- Add breadcrumb structured data -->
  <script type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} />
  
  <Header />
  
  <main class="flex-1">
    <!-- Article Header -->
    <header class="py-12 bg-gray-50 dark:bg-gray-900">
      <div class="container mx-auto px-4">
        <!-- Breadcrumbs -->
        <nav class="mb-8" aria-label="Breadcrumb">
          <ol class="flex space-x-2 text-sm text-gray-600 dark:text-gray-400">
            <li><a href="/" class="hover:text-gray-900 dark:hover:text-gray-200">Home</a></li>
            <li class="before:content-['/'] before:mx-2">
              <a href="/blog" class="hover:text-gray-900 dark:hover:text-gray-200">Blog</a>
            </li>
            <li class="before:content-['/'] before:mx-2 text-gray-900 dark:text-gray-300 font-medium" aria-current="page">
              {title}
            </li>
          </ol>
        </nav>

        <!-- Article Title and Meta -->
        <div class="max-w-4xl mx-auto text-center">
          <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-gray-900 dark:text-white mb-6 text-balance">
            {title}
          </h1>
          
          <p class="text-xl md:text-2xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto text-balance">
            {description}
          </p>

          <!-- Article Meta -->
          <div class="flex flex-wrap justify-center items-center gap-6 text-gray-600 dark:text-gray-400">
            <div class="flex items-center space-x-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <span>By {author}</span>
            </div>
            
            <div class="flex items-center space-x-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <time datetime={publishedTime}>
                {pubDate.toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </time>
            </div>

            {updatedDate && (
              <div class="flex items-center space-x-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                <time datetime={modifiedTime}>
                  Updated {updatedDate.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </time>
              </div>
            )}
            
            <div class="flex items-center space-x-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
              </svg>
              <span>{readingTime} min read</span>
            </div>
          </div>

          <!-- Tags -->
          {tags.length > 0 && (
            <div class="mt-6">
              <div class="flex flex-wrap justify-center gap-2">
                {tags.map(tag => (
                  <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                    #{tag}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </header>

    <!-- Hero Image -->
    {heroImage && (
      <div class="relative">
        <img 
          src={heroImage} 
          alt={heroImageAlt || `Hero image for ${title}`}
          class="w-full h-64 md:h-96 object-cover"
          loading="eager"
          decoding="async"
        />
      </div>
    )}

    <!-- Article Content -->
    <article class="py-12">
      <div class="container mx-auto px-4">
        <div class="max-w-4xl mx-auto">
          <div class="prose prose-lg dark:prose-invert mx-auto">
            <slot />
          </div>
        </div>
      </div>
    </article>

    <!-- Article Footer with Navigation -->
    <footer class="py-8 border-t border-gray-200 dark:border-gray-700">
      <div class="container mx-auto px-4">
        <div class="max-w-4xl mx-auto">
          <!-- Share Buttons -->
          <div class="flex justify-center space-x-4 mb-8">
            <a 
              href={`https://twitter.com/intent/tweet?url=${encodeURIComponent(new URL(Astro.url.pathname, Astro.site || SITE_CONFIG.url).toString())}&text=${encodeURIComponent(title)}&via=${SITE_CONFIG.author.twitter.replace('@', '')}`}
              class="inline-flex items-center px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors"
              target="_blank"
              rel="noopener noreferrer"
              aria-label="Share on Twitter"
            >
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
              </svg>
              Share on Twitter
            </a>
            
            <a 
              href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(new URL(Astro.url.pathname, Astro.site || SITE_CONFIG.url).toString())}`}
              class="inline-flex items-center px-4 py-2 bg-blue-700 hover:bg-blue-800 text-white rounded-lg transition-colors"
              target="_blank"
              rel="noopener noreferrer"
              aria-label="Share on LinkedIn"
            >
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
              Share on LinkedIn
            </a>
          </div>

          <!-- Back to Blog -->
          <div class="text-center">
            <a 
              href="/blog"
              class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
              </svg>
              Back to Blog
            </a>
          </div>
        </div>
      </div>
    </footer>
  </main>

  <Footer />
</BaseLayout>

<style is:global>
  /* Enhance prose styles for better readability */
  .prose {
    --tw-prose-body: theme('colors.gray.700');
    --tw-prose-headings: theme('colors.gray.900');
    --tw-prose-links: theme('colors.blue.600');
    --tw-prose-bold: theme('colors.gray.900');
    --tw-prose-code: theme('colors.gray.900');
    --tw-prose-pre-code: theme('colors.gray.200');
    --tw-prose-pre-bg: theme('colors.gray.800');
  }

  .dark .prose {
    --tw-prose-body: theme('colors.gray.300');
    --tw-prose-headings: theme('colors.white');
    --tw-prose-links: theme('colors.blue.400');
    --tw-prose-bold: theme('colors.white');
    --tw-prose-code: theme('colors.white');
    --tw-prose-pre-code: theme('colors.gray.300');
    --tw-prose-pre-bg: theme('colors.gray.900');
  }

  /* Improve code blocks */
  .prose pre {
    @apply rounded-lg shadow-lg;
  }

  .prose code {
    @apply px-1 py-0.5 rounded bg-gray-100 dark:bg-gray-800 text-sm font-mono;
  }

  .prose pre code {
    @apply p-0 bg-transparent;
  }

  /* Style blockquotes */
  .prose blockquote {
    @apply border-l-4 border-blue-500 bg-blue-50 dark:bg-blue-900/20 rounded-r-lg;
  }

  /* Improve table styling */
  .prose table {
    @apply shadow-sm border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden;
  }

  .prose th {
    @apply bg-gray-50 dark:bg-gray-800;
  }
</style>