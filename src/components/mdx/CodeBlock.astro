---
export interface Props {
  title?: string;
  language?: string;
  showLineNumbers?: boolean;
  highlightLines?: string;
  filename?: string;
}

const { 
  title, 
  language = 'text', 
  showLineNumbers = false, 
  highlightLines = '',
  filename 
} = Astro.props;

// Parse highlight lines (e.g., "1,3-5,8")
const parseHighlightLines = (lines: string): Set<number> => {
  if (!lines) return new Set();
  
  const result = new Set<number>();
  const parts = lines.split(',');
  
  for (const part of parts) {
    const trimmed = part.trim();
    if (trimmed.includes('-')) {
      const [start, end] = trimmed.split('-').map(n => parseInt(n, 10));
      for (let i = start; i <= end; i++) {
        result.add(i);
      }
    } else {
      result.add(parseInt(trimmed, 10));
    }
  }
  
  return result;
};

const highlightSet = parseHighlightLines(highlightLines);
---

<div class="my-6 rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700 shadow-sm">
  <!-- Header -->
  {(title || filename || language) && (
    <div class="flex items-center justify-between px-4 py-2 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
      <div class="flex items-center space-x-3">
        {filename && (
          <div class="flex items-center space-x-1">
            <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <span class="text-sm font-medium text-gray-700 dark:text-gray-300">{filename}</span>
          </div>
        )}
        {title && !filename && (
          <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">{title}</h4>
        )}
      </div>
      
      <div class="flex items-center space-x-3">
        {language !== 'text' && (
          <span class="text-xs font-mono text-gray-500 dark:text-gray-400 uppercase tracking-wider">
            {language}
          </span>
        )}
        <button 
          type="button"
          class="copy-button text-xs text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 transition-colors"
          data-copy-text=""
          title="Copy code"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
          </svg>
        </button>
      </div>
    </div>
  )}
  
  <!-- Code Content -->
  <div class="relative">
    <pre class={`overflow-x-auto p-4 text-sm leading-relaxed ${showLineNumbers ? 'pl-12' : ''}`}><code class={`language-${language}`} data-language={language}><slot /></code></pre>
    
    <!-- Line numbers overlay -->
    {showLineNumbers && (
      <div class="absolute top-0 left-0 p-4 text-sm leading-relaxed pointer-events-none">
        <div class="text-gray-400 dark:text-gray-600 font-mono select-none border-r border-gray-300 dark:border-gray-600 pr-3 mr-3" id="line-numbers">
          <!-- Line numbers will be injected by JavaScript -->
        </div>
      </div>
    )}
  </div>
</div>

<script>
  // Copy functionality
  document.addEventListener('DOMContentLoaded', () => {
    const copyButtons = document.querySelectorAll('.copy-button');
    
    copyButtons.forEach(button => {
      const codeBlock = button.closest('.rounded-lg')?.querySelector('code');
      if (codeBlock) {
        button.setAttribute('data-copy-text', codeBlock.textContent || '');
        
        button.addEventListener('click', async () => {
          const text = button.getAttribute('data-copy-text') || '';
          
          try {
            await navigator.clipboard.writeText(text);
            
            // Visual feedback
            const originalContent = button.innerHTML;
            button.innerHTML = `
              <svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            `;
            
            setTimeout(() => {
              button.innerHTML = originalContent;
            }, 2000);
          } catch (err) {
            console.error('Failed to copy text: ', err);
          }
        });
      }
    });
    
    // Line numbers
    const codeBlocks = document.querySelectorAll('pre code');
    codeBlocks.forEach(codeBlock => {
      const pre = codeBlock.parentElement;
      if (pre?.classList.contains('pl-12')) {
        const lines = codeBlock.textContent?.split('\n') || [];
        const lineNumbersContainer = pre.parentElement?.querySelector('#line-numbers');
        
        if (lineNumbersContainer) {
          const lineNumbers = Array.from({ length: lines.length - 1 }, (_, i) => i + 1)
            .map(num => `<span class="block">${num}</span>`)
            .join('');
          lineNumbersContainer.innerHTML = lineNumbers;
        }
      }
    });
  });
</script>

<style>
  /* Enhanced code block styling */
  pre {
    @apply bg-gray-900 text-gray-100;
  }
  
  .dark pre {
    @apply bg-gray-950;
  }
  
  /* Syntax highlighting placeholders */
  code .token.comment,
  code .token.prolog,
  code .token.doctype,
  code .token.cdata {
    @apply text-gray-500;
  }
  
  code .token.punctuation {
    @apply text-gray-400;
  }
  
  code .token.property,
  code .token.tag,
  code .token.constant,
  code .token.symbol,
  code .token.deleted {
    @apply text-red-400;
  }
  
  code .token.boolean,
  code .token.number {
    @apply text-orange-400;
  }
  
  code .token.selector,
  code .token.attr-name,
  code .token.string,
  code .token.char,
  code .token.builtin,
  code .token.inserted {
    @apply text-green-400;
  }
  
  code .token.operator,
  code .token.entity,
  code .token.url,
  .language-css .token.string,
  .style .token.string,
  code .token.variable {
    @apply text-yellow-400;
  }
  
  code .token.atrule,
  code .token.attr-value,
  code .token.function,
  code .token.class-name {
    @apply text-blue-400;
  }
  
  code .token.keyword {
    @apply text-purple-400;
  }
  
  code .token.regex,
  code .token.important {
    @apply text-orange-400;
  }
</style>