---
// Theme toggle component for dark/light/system mode
---

<button
  id="theme-toggle"
  class="theme-toggle"
  aria-label="Toggle theme"
  title="Toggle between light, dark, and system theme"
>
  <!-- Sun icon (visible in dark mode) -->
  <svg
    id="theme-toggle-light-icon"
    class="w-5 h-5 hidden dark:block transition-transform"
    fill="currentColor"
    viewBox="0 0 20 20"
    aria-hidden="true"
  >
    <path
      fill-rule="evenodd"
      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
      clip-rule="evenodd"
    />
  </svg>
  
  <!-- Moon icon (visible in light mode) -->
  <svg
    id="theme-toggle-dark-icon"
    class="w-5 h-5 block dark:hidden transition-transform"
    fill="currentColor"
    viewBox="0 0 20 20"
    aria-hidden="true"
  >
    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
  </svg>
  
  <!-- System icon (when system theme is active) -->
  <svg
    id="theme-toggle-system-icon"
    class="w-5 h-5 hidden transition-transform"
    fill="currentColor"
    viewBox="0 0 20 20"
    aria-hidden="true"
  >
    <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm0 4a1 1 0 011-1h12a1 1 0 011 1v8a1 1 0 01-1 1H4a1 1 0 01-1-1V8zm2 2a1 1 0 000 2h2a1 1 0 100-2H5z" clip-rule="evenodd" />
  </svg>
  
  <!-- Screen reader status -->
  <span id="theme-status" class="sr-only">Current theme: Light</span>
</button>

<script>
  const themeToggle = document.getElementById('theme-toggle');
  const themeStatus = document.getElementById('theme-status');
  const lightIcon = document.getElementById('theme-toggle-light-icon');
  const darkIcon = document.getElementById('theme-toggle-dark-icon');
  const systemIcon = document.getElementById('theme-toggle-system-icon');
  const html = document.documentElement;
  
  // Get theme from localStorage or default to 'system'
  let currentTheme = localStorage.getItem('theme') || 'system';
  
  function updateTheme(theme: string) {
    currentTheme = theme;
    localStorage.setItem('theme', theme);
    
    const isDark = theme === 'dark' || (theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);
    
    // Update DOM classes
    html.classList.toggle('dark', isDark);
    
    // Update icons visibility
    lightIcon?.classList.toggle('hidden', !isDark);
    darkIcon?.classList.toggle('hidden', isDark || theme === 'system');
    systemIcon?.classList.toggle('hidden', theme !== 'system');
    
    // Update screen reader status
    const themeNames = { light: 'Light', dark: 'Dark', system: 'System' };
    if (themeStatus) {
      themeStatus.textContent = `Current theme: ${themeNames[theme as keyof typeof themeNames]}`;
    }
    
    // Update button title
    if (themeToggle) {
      const nextTheme = theme === 'light' ? 'dark' : theme === 'dark' ? 'system' : 'light';
      const nextThemeName = themeNames[nextTheme as keyof typeof themeNames];
      themeToggle.setAttribute('title', `Switch to ${nextThemeName.toLowerCase()} theme`);
      themeToggle.setAttribute('aria-label', `Switch to ${nextThemeName.toLowerCase()} theme`);
    }
  }
  
  // Initialize theme
  updateTheme(currentTheme);
  
  // Toggle theme on button click
  themeToggle?.addEventListener('click', () => {
    if (currentTheme === 'light') {
      updateTheme('dark');
    } else if (currentTheme === 'dark') {
      updateTheme('system');
    } else {
      updateTheme('light');
    }
    
    // Announce theme change to screen readers
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', 'polite');
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = `Theme switched to ${currentTheme}`;
    document.body.appendChild(announcement);
    
    // Remove announcement after it's been read
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  });
  
  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    if (currentTheme === 'system') {
      updateTheme('system');
    }
  });
  
  // Keyboard navigation support
  themeToggle?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      themeToggle.click();
    }
  });
</script>