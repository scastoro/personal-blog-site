---
export interface Props {
  tags: { name: string; count: number; url: string }[];
  title?: string;
  showCount?: boolean;
  maxTags?: number;
  variant?: 'default' | 'compact' | 'sidebar';
}

const { 
  tags, 
  title = "Popular Tags", 
  showCount = true, 
  maxTags = 20,
  variant = 'default'
} = Astro.props;

// Sort tags by count (descending) and limit
const sortedTags = tags
  .sort((a, b) => b.count - a.count)
  .slice(0, maxTags);

// Calculate font sizes based on count (for cloud effect)
const getTagSize = (count: number, maxCount: number, minCount: number) => {
  if (maxCount === minCount) return 'text-base';
  
  const ratio = (count - minCount) / (maxCount - minCount);
  
  if (variant === 'compact') {
    return ratio > 0.7 ? 'text-sm' : 'text-xs';
  }
  
  if (ratio > 0.8) return 'text-xl';
  if (ratio > 0.6) return 'text-lg';
  if (ratio > 0.4) return 'text-base';
  if (ratio > 0.2) return 'text-sm';
  return 'text-xs';
};

const maxCount = Math.max(...sortedTags.map(tag => tag.count));
const minCount = Math.min(...sortedTags.map(tag => tag.count));

// Style variants
const containerClasses = {
  default: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6",
  compact: "bg-gray-50 dark:bg-gray-800 rounded-md p-4",
  sidebar: "bg-white dark:bg-gray-800 rounded-lg shadow-sm p-4"
};

const titleClasses = {
  default: "text-xl font-bold text-gray-900 dark:text-white mb-4",
  compact: "text-lg font-semibold text-gray-900 dark:text-white mb-3",
  sidebar: "text-lg font-semibold text-gray-900 dark:text-white mb-3"
};
---

{sortedTags.length > 0 && (
  <div class={containerClasses[variant]}>
    {title && (
      <h3 class={titleClasses[variant]}>
        {title}
      </h3>
    )}
    
    <div class="flex flex-wrap gap-2">
      {sortedTags.map(tag => {
        const fontSize = getTagSize(tag.count, maxCount, minCount);
        const opacity = variant === 'default' ? 
          (tag.count / maxCount * 0.4 + 0.6).toFixed(2) : 
          '1';
        
        return (
          <a 
            href={tag.url}
            class={`inline-flex items-center px-3 py-1 rounded-full font-medium transition-all duration-200 hover:scale-105 ${fontSize}`}
            style={`opacity: ${opacity}; background-color: hsl(${(tag.name.charCodeAt(0) * 137) % 360}, 70%, 85%); color: hsl(${(tag.name.charCodeAt(0) * 137) % 360}, 70%, 25%);`}
            title={`${tag.count} post${tag.count > 1 ? 's' : ''} tagged with ${tag.name}`}
          >
            <span class="mr-1">#</span>
            {tag.name}
            {showCount && (
              <span class="ml-2 text-xs opacity-75">
                {tag.count}
              </span>
            )}
          </a>
        );
      })}
    </div>
    
    {tags.length > maxTags && (
      <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
        <p class="text-sm text-gray-600 dark:text-gray-400">
          Showing {maxTags} of {tags.length} tags
        </p>
      </div>
    )}
  </div>
)}

{sortedTags.length === 0 && (
  <div class={containerClasses[variant]}>
    <div class="text-center py-8">
      <svg class="mx-auto h-12 w-12 text-gray-400 dark:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
      </svg>
      <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No tags</h3>
      <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
        No tags have been used in any posts yet.
      </p>
    </div>
  </div>
)}

<style>
  /* Custom hover effects */
  a:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  /* Dark mode adjustments for tag colors */
  .dark a {
    filter: brightness(0.9);
  }
  
  .dark a:hover {
    filter: brightness(1.1);
  }
</style>