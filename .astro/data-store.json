[["Map",1,2,9,10,150,151],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.7","content-config-digest","c090fabf20886887","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://salcastoro.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/noop\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark-dimmed\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,86,87],"context-engineering-claude-code-subagents",{"id":11,"data":13,"body":27,"filePath":28,"digest":29,"rendered":30,"legacyId":85},{"title":14,"description":15,"pubDate":16,"author":17,"tags":18,"keywords":23,"draft":24,"featured":24,"noindex":24,"nofollow":24,"twitterCard":25,"relatedPosts":26},"Context Engineering in Claude Code with Custom Subagents","How context engineering and Claude Code subagents work together to reduce context pollution, add guardrails, and scale AI-assisted development.",["Date","2025-09-10T00:00:00.000Z"],"Sal Castoro",[19,20,21,22],"Claude Code","Subagents","Context Engineering","AI tooling",[],false,"summary_large_image",[],"# Context Engineering in Claude Code: Custom Subagents as Specialized Helpers\n\nIn Claude Code, the shift from prompt engineering toward context engineering + agent delegation becomes particularly meaningful via custom subagents. These subagents let you isolate responsibilities, reduce context pollution, and tailor tool access for each domain. This post zooms into how that works in the Claude Code world.\n\n---\n\n## A Very Brief Primer: Prompt → Context → Agents\n\nI'll skim this: early work with LLMs centered on prompt engineering — trying different phrasings, few-shot examples, etc. But as soon as you hit real scale (multi-file repos, multiple concerns), prompt tweaks alone break down.\n\nEnter context engineering: you start thinking about which information lives in the model's working memory, how it's retrieved, how system prompts are set, and how tools are exposed. In Claude Code, that manifests in `CLAUDE.md`, agent manifests, and subagent context windows.\n\nThen, to scale beyond one monolithic assistant, you use custom subagents, each with its own context, system prompts, and tool permissions, that Claude delegates to when tasks match.\n\n---\n\n## What Are Claude Code Subagents?\n\nAccording to the Claude Code docs, subagents are pre-configured AI personalities with:\n\n- Their own context window, separate from the main conversation.\n- A custom system prompt that defines their role, constraints, style, and domain.\n- A bounded tool set (you can restrict what tools the subagent can use).\n\nBecause they run in isolated contexts, they help prevent context pollution — for example you don't want your React logic discussion bleeding into your database migration agent's reasoning.\n\nYou can both explicitly invoke a subagent (for example \"Use the code-reviewer subagent on this diff\") or allow Claude Code to automatically delegate tasks if they match a subagent's triggers.\n\nSubagent definitions live as Markdown files:\n\n```markdown\n---\nname: your-sub-agent-name\ndescription: Description of when this subagent should be invoked\ntools: tool1, tool2, tool3 # Optional - inherits all tools if omitted\nmodel: sonnet # Optional - specify model alias or 'inherit'\n---\n\nYour subagent's system prompt goes here. This can be multiple paragraphs\nand should clearly define the subagent's role, capabilities, and approach\nto solving problems.\n\nInclude specific instructions, best practices, and any constraints\nthe subagent should follow.\n```\n\n---\n\n## Why Subagents Help: The Context Engineering Benefits\n\n### 1. Context Isolation\n\nEach subagent has its own sandbox — its own memory or working context. That means your primary Claude thread stays focused on high-level orchestration, while domain-specific reasoning lives elsewhere.\n\n### 2. Focused, Specialized Behavior\n\nBecause each subagent carries a role-specific system prompt and narrowed tool access, it behaves more predictably in its domain. For instance, a code-review subagent doesn't need tools with write access to analyze code and report back to the main agent.\n\n### 3. Tool and Permission Control\n\nYou can restrict which tools a subagent is allowed to use (read-only versus write, etc.). That gives you guardrails and safer delegation.\n\n### 4. Reusability and Shared Workflows\n\nOnce you've defined user-scoped subagents (in the `~/.claude/agents/` directory), they can be used across all projects. Since they are just markdown files, you can also copy over specific agents to your desired projects.\n\n### 5. Cleaner Main Context\n\nBecause the subagents deal with details, your main Claude conversation doesn't get bloated. This is critical when dealing with large codebases where token budget and context drift are real risks.\n\n---\n\n## Sample Subagent Configs and Use Cases\n\nHere are a few illustrative examples of Claude Code subagents (drawn from the Anthropic docs).\n\n### Code Reviewer Agent\n\n```markdown\n---\nname: code-reviewer\ndescription: Expert code review specialist. Proactively reviews code for quality, security, and maintainability. Use immediately after writing or modifying code.\ntools: Read, Grep, Glob, Bash\nmodel: inherit\n---\n\nYou are a senior code reviewer ensuring high standards of code quality and security.\n\nWhen invoked:\n\n1. Run git diff to see recent changes\n2. Focus on modified files\n3. Begin review immediately\n\nReview checklist:\n\n- Code is simple and readable\n- Functions and variables are well-named\n- No duplicated code\n- Proper error handling\n- No exposed secrets or API keys\n- Input validation implemented\n- Good test coverage\n- Performance considerations addressed\n\nProvide feedback organized by priority:\n\n- Critical issues (must fix)\n- Warnings (should fix)\n- Suggestions (consider improving)\n\nInclude specific examples of how to fix issues.\n```\n\nYou might invoke it explicitly:\n\n> Use code-reviewer on PR #42\n\nOr let Claude auto-delegate when code changes are detected.\n\nHere's another example:\n\n### Debugger Agent\n\n```markdown\n---\nname: debugger\ndescription: Debugging specialist for errors, test failures, and unexpected behavior. Use proactively when encountering any issues.\ntools: Read, Edit, Bash, Grep, Glob\n---\n\nYou are an expert debugger specializing in root cause analysis.\n\nWhen invoked:\n\n1. Capture error message and stack trace\n2. Identify reproduction steps\n3. Isolate the failure location\n4. Implement minimal fix\n5. Verify solution works\n\nDebugging process:\n\n- Analyze error messages and logs\n- Check recent code changes\n- Form and test hypotheses\n- Add strategic debug logging\n- Inspect variable states\n\nFor each issue, provide:\n\n- Root cause explanation\n- Evidence supporting the diagnosis\n- Specific code fix\n- Testing approach\n- Prevention recommendations\n\nFocus on fixing the underlying issue, not just symptoms.\n```\n\nWhen your main Claude instance encounters any errors, test failures, or unexpected behavior, it can proactively delegate to the debugger agent for systematic troubleshooting.\n\n---\n\n## Best Practices and Lessons for Claude Code Subagents\n\nWhen working with subagents in Claude Code, here are tips derived from Anthropic's best practices and community experiences:\n\n- Keep subagents narrowly focused — a single domain or task. Avoid overlap.\n- Start with Claude-generated definitions — use `/agents` to scaffold them, then refine.\n- Limit tool permissions initially — give them only what they need (read-only at first) and expand later.\n- Write clear system prompts — with precise responsibilities, constraints, and stylistic expectations.\n- Version control agent definitions — store the Markdown manifest files in git so they evolve with your project.\n- Chain or orchestrate carefully — if subagents call each other (for example code review → refactor agent → test agent), define clear handoff protocols to avoid context conflicts.\n- Consider performance and latency trade-offs — subagents can feel slower than one big agent since context switching and delegation adds overhead.\n\n---\n\n## Putting It All Together: Context plus Subagents in Practice\n\nHere's how this might play out in a real workflow:\n\n1. User starts a task (for example \"Implement feature X in the backend\").\n2. Claude Code loads contextual files (for example `CLAUDE.md`, relevant modules) and reasons at a high level.\n3. Claude adds and/or modifies code to accomplish this task\n4. Claude identifies a need to review code, so it delegates to `code-reviewer` subagent, passing only the diff.\n5. `code-reviewer` uses the tools available to it to examine the code for quality, returns annotated feedback.\n6. Claude sees a test failure, delegates that portion to `debugger` subagent.\n7. `debugger` inspects logs and stack traces, proposes fixes.\n8. Claude integrates suggestions, asks the user if they want to apply changes, or further refine.\n\nThroughout this, each subagent hasn't polluted the main context — only minimal summaries or results bubble up.","src/content/blog/context-engineering-claude-code-subagents.md","7838310177fad14f",{"html":31,"metadata":32},"\u003Ch1 id=\"context-engineering-in-claude-code-custom-subagents-as-specialized-helpers\">Context Engineering in Claude Code: Custom Subagents as Specialized Helpers\u003C/h1>\n\u003Cp>In Claude Code, the shift from prompt engineering toward context engineering + agent delegation becomes particularly meaningful via custom subagents. These subagents let you isolate responsibilities, reduce context pollution, and tailor tool access for each domain. This post zooms into how that works in the Claude Code world.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"a-very-brief-primer-prompt--context--agents\">A Very Brief Primer: Prompt → Context → Agents\u003C/h2>\n\u003Cp>I’ll skim this: early work with LLMs centered on prompt engineering — trying different phrasings, few-shot examples, etc. But as soon as you hit real scale (multi-file repos, multiple concerns), prompt tweaks alone break down.\u003C/p>\n\u003Cp>Enter context engineering: you start thinking about which information lives in the model’s working memory, how it’s retrieved, how system prompts are set, and how tools are exposed. In Claude Code, that manifests in \u003Ccode>CLAUDE.md\u003C/code>, agent manifests, and subagent context windows.\u003C/p>\n\u003Cp>Then, to scale beyond one monolithic assistant, you use custom subagents, each with its own context, system prompts, and tool permissions, that Claude delegates to when tasks match.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"what-are-claude-code-subagents\">What Are Claude Code Subagents?\u003C/h2>\n\u003Cp>According to the Claude Code docs, subagents are pre-configured AI personalities with:\u003C/p>\n\u003Cul>\n\u003Cli>Their own context window, separate from the main conversation.\u003C/li>\n\u003Cli>A custom system prompt that defines their role, constraints, style, and domain.\u003C/li>\n\u003Cli>A bounded tool set (you can restrict what tools the subagent can use).\u003C/li>\n\u003C/ul>\n\u003Cp>Because they run in isolated contexts, they help prevent context pollution — for example you don’t want your React logic discussion bleeding into your database migration agent’s reasoning.\u003C/p>\n\u003Cp>You can both explicitly invoke a subagent (for example “Use the code-reviewer subagent on this diff”) or allow Claude Code to automatically delegate tasks if they match a subagent’s triggers.\u003C/p>\n\u003Cp>Subagent definitions live as Markdown files:\u003C/p>\n\u003Cpre class=\"astro-code github-dark-dimmed\" style=\"background-color:#22272e;color:#adbac7; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"markdown\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6CB6FF;font-weight:bold\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">name: your-sub-agent-name\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">description: Description of when this subagent should be invoked\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">tools: tool1, tool2, tool3 # Optional - inherits all tools if omitted\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">model: sonnet # Optional - specify model alias or 'inherit'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6CB6FF;font-weight:bold\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">Your subagent's system prompt goes here. This can be multiple paragraphs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">and should clearly define the subagent's role, capabilities, and approach\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">to solving problems.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">Include specific instructions, best practices, and any constraints\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">the subagent should follow.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"why-subagents-help-the-context-engineering-benefits\">Why Subagents Help: The Context Engineering Benefits\u003C/h2>\n\u003Ch3 id=\"1-context-isolation\">1. Context Isolation\u003C/h3>\n\u003Cp>Each subagent has its own sandbox — its own memory or working context. That means your primary Claude thread stays focused on high-level orchestration, while domain-specific reasoning lives elsewhere.\u003C/p>\n\u003Ch3 id=\"2-focused-specialized-behavior\">2. Focused, Specialized Behavior\u003C/h3>\n\u003Cp>Because each subagent carries a role-specific system prompt and narrowed tool access, it behaves more predictably in its domain. For instance, a code-review subagent doesn’t need tools with write access to analyze code and report back to the main agent.\u003C/p>\n\u003Ch3 id=\"3-tool-and-permission-control\">3. Tool and Permission Control\u003C/h3>\n\u003Cp>You can restrict which tools a subagent is allowed to use (read-only versus write, etc.). That gives you guardrails and safer delegation.\u003C/p>\n\u003Ch3 id=\"4-reusability-and-shared-workflows\">4. Reusability and Shared Workflows\u003C/h3>\n\u003Cp>Once you’ve defined user-scoped subagents (in the \u003Ccode>~/.claude/agents/\u003C/code> directory), they can be used across all projects. Since they are just markdown files, you can also copy over specific agents to your desired projects.\u003C/p>\n\u003Ch3 id=\"5-cleaner-main-context\">5. Cleaner Main Context\u003C/h3>\n\u003Cp>Because the subagents deal with details, your main Claude conversation doesn’t get bloated. This is critical when dealing with large codebases where token budget and context drift are real risks.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"sample-subagent-configs-and-use-cases\">Sample Subagent Configs and Use Cases\u003C/h2>\n\u003Cp>Here are a few illustrative examples of Claude Code subagents (drawn from the Anthropic docs).\u003C/p>\n\u003Ch3 id=\"code-reviewer-agent\">Code Reviewer Agent\u003C/h3>\n\u003Cpre class=\"astro-code github-dark-dimmed\" style=\"background-color:#22272e;color:#adbac7; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"markdown\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6CB6FF;font-weight:bold\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">name: code-reviewer\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">description: Expert code review specialist. Proactively reviews code for quality, security, and maintainability. Use immediately after writing or modifying code.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">tools: Read, Grep, Glob, Bash\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">model: inherit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6CB6FF;font-weight:bold\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">You are a senior code reviewer ensuring high standards of code quality and security.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">When invoked:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">1.\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Run git diff to see recent changes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">2.\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Focus on modified files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">3.\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Begin review immediately\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">Review checklist:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Code is simple and readable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Functions and variables are well-named\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> No duplicated code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Proper error handling\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> No exposed secrets or API keys\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Input validation implemented\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Good test coverage\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Performance considerations addressed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">Provide feedback organized by priority:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Critical issues (must fix)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Warnings (should fix)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Suggestions (consider improving)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">Include specific examples of how to fix issues.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You might invoke it explicitly:\u003C/p>\n\u003Cblockquote>\n\u003Cp>Use code-reviewer on PR #42\u003C/p>\n\u003C/blockquote>\n\u003Cp>Or let Claude auto-delegate when code changes are detected.\u003C/p>\n\u003Cp>Here’s another example:\u003C/p>\n\u003Ch3 id=\"debugger-agent\">Debugger Agent\u003C/h3>\n\u003Cpre class=\"astro-code github-dark-dimmed\" style=\"background-color:#22272e;color:#adbac7; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"markdown\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6CB6FF;font-weight:bold\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">name: debugger\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">description: Debugging specialist for errors, test failures, and unexpected behavior. Use proactively when encountering any issues.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">tools: Read, Edit, Bash, Grep, Glob\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6CB6FF;font-weight:bold\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">You are an expert debugger specializing in root cause analysis.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">When invoked:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">1.\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Capture error message and stack trace\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">2.\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Identify reproduction steps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">3.\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Isolate the failure location\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">4.\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Implement minimal fix\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">5.\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Verify solution works\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">Debugging process:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Analyze error messages and logs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Check recent code changes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Form and test hypotheses\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Add strategic debug logging\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Inspect variable states\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">For each issue, provide:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Root cause explanation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Evidence supporting the diagnosis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Specific code fix\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Testing approach\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F69D50\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Prevention recommendations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ADBAC7\">Focus on fixing the underlying issue, not just symptoms.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>When your main Claude instance encounters any errors, test failures, or unexpected behavior, it can proactively delegate to the debugger agent for systematic troubleshooting.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"best-practices-and-lessons-for-claude-code-subagents\">Best Practices and Lessons for Claude Code Subagents\u003C/h2>\n\u003Cp>When working with subagents in Claude Code, here are tips derived from Anthropic’s best practices and community experiences:\u003C/p>\n\u003Cul>\n\u003Cli>Keep subagents narrowly focused — a single domain or task. Avoid overlap.\u003C/li>\n\u003Cli>Start with Claude-generated definitions — use \u003Ccode>/agents\u003C/code> to scaffold them, then refine.\u003C/li>\n\u003Cli>Limit tool permissions initially — give them only what they need (read-only at first) and expand later.\u003C/li>\n\u003Cli>Write clear system prompts — with precise responsibilities, constraints, and stylistic expectations.\u003C/li>\n\u003Cli>Version control agent definitions — store the Markdown manifest files in git so they evolve with your project.\u003C/li>\n\u003Cli>Chain or orchestrate carefully — if subagents call each other (for example code review → refactor agent → test agent), define clear handoff protocols to avoid context conflicts.\u003C/li>\n\u003Cli>Consider performance and latency trade-offs — subagents can feel slower than one big agent since context switching and delegation adds overhead.\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"putting-it-all-together-context-plus-subagents-in-practice\">Putting It All Together: Context plus Subagents in Practice\u003C/h2>\n\u003Cp>Here’s how this might play out in a real workflow:\u003C/p>\n\u003Col>\n\u003Cli>User starts a task (for example “Implement feature X in the backend”).\u003C/li>\n\u003Cli>Claude Code loads contextual files (for example \u003Ccode>CLAUDE.md\u003C/code>, relevant modules) and reasons at a high level.\u003C/li>\n\u003Cli>Claude adds and/or modifies code to accomplish this task\u003C/li>\n\u003Cli>Claude identifies a need to review code, so it delegates to \u003Ccode>code-reviewer\u003C/code> subagent, passing only the diff.\u003C/li>\n\u003Cli>\u003Ccode>code-reviewer\u003C/code> uses the tools available to it to examine the code for quality, returns annotated feedback.\u003C/li>\n\u003Cli>Claude sees a test failure, delegates that portion to \u003Ccode>debugger\u003C/code> subagent.\u003C/li>\n\u003Cli>\u003Ccode>debugger\u003C/code> inspects logs and stack traces, proposes fixes.\u003C/li>\n\u003Cli>Claude integrates suggestions, asks the user if they want to apply changes, or further refine.\u003C/li>\n\u003C/ol>\n\u003Cp>Throughout this, each subagent hasn’t polluted the main context — only minimal summaries or results bubble up.\u003C/p>",{"headings":33,"localImagePaths":79,"remoteImagePaths":80,"frontmatter":81,"imagePaths":84},[34,38,42,45,48,52,55,58,61,64,67,70,73,76],{"depth":35,"slug":36,"text":37},1,"context-engineering-in-claude-code-custom-subagents-as-specialized-helpers","Context Engineering in Claude Code: Custom Subagents as Specialized Helpers",{"depth":39,"slug":40,"text":41},2,"a-very-brief-primer-prompt--context--agents","A Very Brief Primer: Prompt → Context → Agents",{"depth":39,"slug":43,"text":44},"what-are-claude-code-subagents","What Are Claude Code Subagents?",{"depth":39,"slug":46,"text":47},"why-subagents-help-the-context-engineering-benefits","Why Subagents Help: The Context Engineering Benefits",{"depth":49,"slug":50,"text":51},3,"1-context-isolation","1. Context Isolation",{"depth":49,"slug":53,"text":54},"2-focused-specialized-behavior","2. Focused, Specialized Behavior",{"depth":49,"slug":56,"text":57},"3-tool-and-permission-control","3. Tool and Permission Control",{"depth":49,"slug":59,"text":60},"4-reusability-and-shared-workflows","4. Reusability and Shared Workflows",{"depth":49,"slug":62,"text":63},"5-cleaner-main-context","5. Cleaner Main Context",{"depth":39,"slug":65,"text":66},"sample-subagent-configs-and-use-cases","Sample Subagent Configs and Use Cases",{"depth":49,"slug":68,"text":69},"code-reviewer-agent","Code Reviewer Agent",{"depth":49,"slug":71,"text":72},"debugger-agent","Debugger Agent",{"depth":39,"slug":74,"text":75},"best-practices-and-lessons-for-claude-code-subagents","Best Practices and Lessons for Claude Code Subagents",{"depth":39,"slug":77,"text":78},"putting-it-all-together-context-plus-subagents-in-practice","Putting It All Together: Context plus Subagents in Practice",[],[],{"title":14,"description":15,"pubDate":82,"tags":83,"author":17,"draft":24,"featured":24,"twitterCard":25},["Date","2025-09-10T00:00:00.000Z"],[19,20,21,22],[],"context-engineering-claude-code-subagents.md","going-beyond-basics-claude-code-custom-agents",{"id":86,"data":88,"body":97,"filePath":98,"assetImports":99,"digest":106,"rendered":107,"legacyId":149},{"title":89,"description":90,"pubDate":91,"author":17,"tags":92,"keywords":95,"draft":24,"featured":24,"noindex":24,"nofollow":24,"twitterCard":25,"relatedPosts":96},"Claude Code Custom Subagents Advanced Strategies","A deep dive into advanced features, workflows, and pitfalls of custom agents in Claude Code.",["Date","2025-09-25T00:00:00.000Z"],[19,93,94,21],"AI Agents","Developer Tools",[],[],"# Claude Code Custom Subagents Advanced Strategies\n\nClaude Code custom subagents let you break down work into specialized helpers with their own instructions, tools, and context windows. Instead of stuffing everything into one giant prompt, you can define agents for specific roles and let them collaborate.\n\nThis post starts with how to set them up, then dives into advanced features, orchestration patterns, and the pitfalls to avoid.\n\n---\n\n## Setting Up Custom Agents\n\nCreating agents in Claude Code is straightforward:\n\n- Run `/agents` in Claude Code to create one.\n- Give it a **clear role** (e.g., reviewer, tester, doc writer).\n- Define the **system prompt** with scope, criteria, and tone.\n- Limit its **tools/permissions** to what's necessary.\n- Keep context small—prefer summaries and file lists over raw dumps.\n\nThis keeps the agent lightweight, predictable, and reusable.\n\n---\n\n## Advanced Features of Custom Agents\n\nOnce you've mastered setup, you can start pushing agents further.\n\n### Parallel Execution\n\nYou can run several agents at once, each on a discrete part of a problem.\n\n![Same subagents demo](../../assets/images/same_subagents_10s.gif)\n\nIn this image, the astro-developer subagent was able to create several web pages at once.\nBecause the work doesn't overlap, results return faster without the subagents stepping on each other.\n\nHere's an example of **multiple sub-agents running in parallel**:\n\n![Different subagents in action](../../assets/images/different_subagents_long_7s.gif)\n\n---\n\n### Serial Workflows\n\nSome tasks need sequential execution. A debugging agent might identify causes, then hand off to a testing agent, then finally to a builder agent for patching. You can define these workflows in your `CLAUDE.md`, in each agent's description, or with an orchestration agent.\n\n![Serial execution plan](../../assets/images/serial_execution_plan.png)\n\n---\n\n### Auto-Activation\n\nWell-written descriptions allow Claude to **auto-trigger** agents when relevant. For example, asking for \"SEO improvements\" can automatically summon your `seo-optimizer` agent without manual activation.\n\n---\n\n### Domain-Specific Agents\n\nAgents can specialize in:\n\n- **Code review** (security, performance, style).\n- **UI/UX design checks** with accessibility rules baked in.\n- **Performance validation** (load testing, bundle size audits).\n- **End-to-end testing** with MCP integrations like Playwright.\n\nHere's an example of a code reviewer subagent in action:\n\n![Code reviewer subagent report](../../assets/images/code_reviewer_subagent_report.png)\n\n---\n\n## Pitfalls and Gotchas\n\nAs powerful as custom agents are, they aren't free from trade-offs.\n\n- **Token Costs:**\n  Each agent consumes tokens for its context and replies. In a complex workflow with 6–8 agents, that adds up fast. Be intentional—don't spin up agents you don't need.\n\n![Context usage monitoring](../../assets/images/context_usage.png)\n\n- **Context Pollution:**\n  Overloading an agent with too much irrelevant data leads to hallucinations. Keep prompts short, scope narrow, and context lean.\n\n- **Overlapping Roles:**\n  Two agents trying to do the same job (like two builders editing at once) can cause conflicts. Assign one job per agent and coordinate writes.\n\n- **Hidden Dependencies in Parallel Runs:**\n  Running tasks in parallel only works if they're independent. If one depends on another, you'll get inconsistent outputs.\n\n- **Maintenance Overhead:**\n  Agents are reusable but still require upkeep. Outdated instructions or stale context files can lead to incorrect assumptions.\n\n---\n\n## Example: A Multi-Agent Project Setup\n\nHere's a snapshot of custom agents from a real project:\n\n![Claude Code Custom Agents Screenshot](../../assets/images/claude-custom-agents.png)\n\n- `code-reviewer (User)` – 222 tokens\n- `documentation-writer (Project)` – 39 tokens\n- `ui-designer (Project)` – 37 tokens\n- `e2e-tester (Project)` – 48 tokens\n- `astro-developer (Project)` – 53 tokens\n- `seo-optimizer (Project)` – 41 tokens\n- `accessibility-auditor (Project)` – 42 tokens\n- `performance-validator (Project)` – 42 tokens\n\nNotice how each has a specific role and relatively low token footprint—except for the user-configured reviewer, which is much heavier.\n\n---\n\n## Key Takeaways\n\n- **Start small**: one role, one job, minimal context.\n- **Scale smart**: add agents only when they reduce friction.\n- **Guard your context**: shorter prompts outperform bloated ones.\n- **Mind the cost**: tokens = money + context space.\n- **Automate carefully**: parallelize safe tasks, sequence risky ones.\n\nCustom agents give Claude Code the ability to work like a real team—specialized, predictable, and collaborative. When used well, they extend your reach without burning tokens or introducing chaos.\n\n---\n\n## Resources\n\n- [Claude Code Docs: Sub-Agents](https://docs.anthropic.com/en/docs/claude-code/sub-agents)\n- [ClaudeLog Blog](https://claudelog.com/)\n- [MCP Servers for Custom Tools](https://docs.anthropic.com/en/docs/mcp)\n\n---\n\nHave you tried building workflows with custom agents? Share your stories—I'd love to compare setups and learn what's working for other developers.","src/content/blog/going-beyond-basics-claude-code-custom-agents.md",[100,101,102,103,104,105],"../../assets/images/same_subagents_10s.gif","../../assets/images/different_subagents_long_7s.gif","../../assets/images/serial_execution_plan.png","../../assets/images/code_reviewer_subagent_report.png","../../assets/images/context_usage.png","../../assets/images/claude-custom-agents.png","9ebe8c0fc8bfcbee",{"html":108,"metadata":109},"\u003Ch1 id=\"claude-code-custom-subagents-advanced-strategies\">Claude Code Custom Subagents Advanced Strategies\u003C/h1>\n\u003Cp>Claude Code custom subagents let you break down work into specialized helpers with their own instructions, tools, and context windows. Instead of stuffing everything into one giant prompt, you can define agents for specific roles and let them collaborate.\u003C/p>\n\u003Cp>This post starts with how to set them up, then dives into advanced features, orchestration patterns, and the pitfalls to avoid.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"setting-up-custom-agents\">Setting Up Custom Agents\u003C/h2>\n\u003Cp>Creating agents in Claude Code is straightforward:\u003C/p>\n\u003Cul>\n\u003Cli>Run \u003Ccode>/agents\u003C/code> in Claude Code to create one.\u003C/li>\n\u003Cli>Give it a \u003Cstrong>clear role\u003C/strong> (e.g., reviewer, tester, doc writer).\u003C/li>\n\u003Cli>Define the \u003Cstrong>system prompt\u003C/strong> with scope, criteria, and tone.\u003C/li>\n\u003Cli>Limit its \u003Cstrong>tools/permissions\u003C/strong> to what’s necessary.\u003C/li>\n\u003Cli>Keep context small—prefer summaries and file lists over raw dumps.\u003C/li>\n\u003C/ul>\n\u003Cp>This keeps the agent lightweight, predictable, and reusable.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"advanced-features-of-custom-agents\">Advanced Features of Custom Agents\u003C/h2>\n\u003Cp>Once you’ve mastered setup, you can start pushing agents further.\u003C/p>\n\u003Ch3 id=\"parallel-execution\">Parallel Execution\u003C/h3>\n\u003Cp>You can run several agents at once, each on a discrete part of a problem.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/images/same_subagents_10s.gif&#x22;,&#x22;alt&#x22;:&#x22;Same subagents demo&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>In this image, the astro-developer subagent was able to create several web pages at once.\nBecause the work doesn’t overlap, results return faster without the subagents stepping on each other.\u003C/p>\n\u003Cp>Here’s an example of \u003Cstrong>multiple sub-agents running in parallel\u003C/strong>:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/images/different_subagents_long_7s.gif&#x22;,&#x22;alt&#x22;:&#x22;Different subagents in action&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Chr>\n\u003Ch3 id=\"serial-workflows\">Serial Workflows\u003C/h3>\n\u003Cp>Some tasks need sequential execution. A debugging agent might identify causes, then hand off to a testing agent, then finally to a builder agent for patching. You can define these workflows in your \u003Ccode>CLAUDE.md\u003C/code>, in each agent’s description, or with an orchestration agent.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/images/serial_execution_plan.png&#x22;,&#x22;alt&#x22;:&#x22;Serial execution plan&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Chr>\n\u003Ch3 id=\"auto-activation\">Auto-Activation\u003C/h3>\n\u003Cp>Well-written descriptions allow Claude to \u003Cstrong>auto-trigger\u003C/strong> agents when relevant. For example, asking for “SEO improvements” can automatically summon your \u003Ccode>seo-optimizer\u003C/code> agent without manual activation.\u003C/p>\n\u003Chr>\n\u003Ch3 id=\"domain-specific-agents\">Domain-Specific Agents\u003C/h3>\n\u003Cp>Agents can specialize in:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Code review\u003C/strong> (security, performance, style).\u003C/li>\n\u003Cli>\u003Cstrong>UI/UX design checks\u003C/strong> with accessibility rules baked in.\u003C/li>\n\u003Cli>\u003Cstrong>Performance validation\u003C/strong> (load testing, bundle size audits).\u003C/li>\n\u003Cli>\u003Cstrong>End-to-end testing\u003C/strong> with MCP integrations like Playwright.\u003C/li>\n\u003C/ul>\n\u003Cp>Here’s an example of a code reviewer subagent in action:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/images/code_reviewer_subagent_report.png&#x22;,&#x22;alt&#x22;:&#x22;Code reviewer subagent report&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"pitfalls-and-gotchas\">Pitfalls and Gotchas\u003C/h2>\n\u003Cp>As powerful as custom agents are, they aren’t free from trade-offs.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Token Costs:\u003C/strong>\nEach agent consumes tokens for its context and replies. In a complex workflow with 6–8 agents, that adds up fast. Be intentional—don’t spin up agents you don’t need.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/images/context_usage.png&#x22;,&#x22;alt&#x22;:&#x22;Context usage monitoring&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Context Pollution:\u003C/strong>\nOverloading an agent with too much irrelevant data leads to hallucinations. Keep prompts short, scope narrow, and context lean.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Overlapping Roles:\u003C/strong>\nTwo agents trying to do the same job (like two builders editing at once) can cause conflicts. Assign one job per agent and coordinate writes.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Hidden Dependencies in Parallel Runs:\u003C/strong>\nRunning tasks in parallel only works if they’re independent. If one depends on another, you’ll get inconsistent outputs.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Maintenance Overhead:\u003C/strong>\nAgents are reusable but still require upkeep. Outdated instructions or stale context files can lead to incorrect assumptions.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"example-a-multi-agent-project-setup\">Example: A Multi-Agent Project Setup\u003C/h2>\n\u003Cp>Here’s a snapshot of custom agents from a real project:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/images/claude-custom-agents.png&#x22;,&#x22;alt&#x22;:&#x22;Claude Code Custom Agents Screenshot&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>code-reviewer (User)\u003C/code> – 222 tokens\u003C/li>\n\u003Cli>\u003Ccode>documentation-writer (Project)\u003C/code> – 39 tokens\u003C/li>\n\u003Cli>\u003Ccode>ui-designer (Project)\u003C/code> – 37 tokens\u003C/li>\n\u003Cli>\u003Ccode>e2e-tester (Project)\u003C/code> – 48 tokens\u003C/li>\n\u003Cli>\u003Ccode>astro-developer (Project)\u003C/code> – 53 tokens\u003C/li>\n\u003Cli>\u003Ccode>seo-optimizer (Project)\u003C/code> – 41 tokens\u003C/li>\n\u003Cli>\u003Ccode>accessibility-auditor (Project)\u003C/code> – 42 tokens\u003C/li>\n\u003Cli>\u003Ccode>performance-validator (Project)\u003C/code> – 42 tokens\u003C/li>\n\u003C/ul>\n\u003Cp>Notice how each has a specific role and relatively low token footprint—except for the user-configured reviewer, which is much heavier.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"key-takeaways\">Key Takeaways\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Start small\u003C/strong>: one role, one job, minimal context.\u003C/li>\n\u003Cli>\u003Cstrong>Scale smart\u003C/strong>: add agents only when they reduce friction.\u003C/li>\n\u003Cli>\u003Cstrong>Guard your context\u003C/strong>: shorter prompts outperform bloated ones.\u003C/li>\n\u003Cli>\u003Cstrong>Mind the cost\u003C/strong>: tokens = money + context space.\u003C/li>\n\u003Cli>\u003Cstrong>Automate carefully\u003C/strong>: parallelize safe tasks, sequence risky ones.\u003C/li>\n\u003C/ul>\n\u003Cp>Custom agents give Claude Code the ability to work like a real team—specialized, predictable, and collaborative. When used well, they extend your reach without burning tokens or introducing chaos.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"resources\">Resources\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://docs.anthropic.com/en/docs/claude-code/sub-agents\">Claude Code Docs: Sub-Agents\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://claudelog.com/\">ClaudeLog Blog\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://docs.anthropic.com/en/docs/mcp\">MCP Servers for Custom Tools\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Cp>Have you tried building workflows with custom agents? Share your stories—I’d love to compare setups and learn what’s working for other developers.\u003C/p>",{"headings":110,"localImagePaths":143,"remoteImagePaths":144,"frontmatter":145,"imagePaths":148},[111,113,116,119,122,125,128,131,134,137,140],{"depth":35,"slug":112,"text":89},"claude-code-custom-subagents-advanced-strategies",{"depth":39,"slug":114,"text":115},"setting-up-custom-agents","Setting Up Custom Agents",{"depth":39,"slug":117,"text":118},"advanced-features-of-custom-agents","Advanced Features of Custom Agents",{"depth":49,"slug":120,"text":121},"parallel-execution","Parallel Execution",{"depth":49,"slug":123,"text":124},"serial-workflows","Serial Workflows",{"depth":49,"slug":126,"text":127},"auto-activation","Auto-Activation",{"depth":49,"slug":129,"text":130},"domain-specific-agents","Domain-Specific Agents",{"depth":39,"slug":132,"text":133},"pitfalls-and-gotchas","Pitfalls and Gotchas",{"depth":39,"slug":135,"text":136},"example-a-multi-agent-project-setup","Example: A Multi-Agent Project Setup",{"depth":39,"slug":138,"text":139},"key-takeaways","Key Takeaways",{"depth":39,"slug":141,"text":142},"resources","Resources",[100,101,102,103,104,105],[],{"title":89,"description":90,"pubDate":146,"author":17,"tags":147,"draft":24,"featured":24,"twitterCard":25},["Date","2025-09-25T00:00:00.000Z"],[19,93,94,21],[100,101,102,103,104,105],"going-beyond-basics-claude-code-custom-agents.md","authors",["Map",152,153],"main-author",{"id":152,"data":154,"filePath":179,"digest":180},{"name":17,"bio":155,"longBio":156,"avatar":157,"email":158,"website":159,"social":160,"title":164,"company":165,"location":166,"expertise":167,"languages":175,"showInAuthorsList":177,"featured":177,"joinDate":178},"Full-stack developer passionate about web technologies, performance, and creating inclusive digital experiences.","Experienced full-stack developer with expertise in modern web technologies including TypeScript, React, and Node.js. Passionate about web performance, accessibility, and developer experience. Enjoys exploring new technologies and sharing knowledge with the community.","/images/profile-400.jpg","hello@salcastoro.com","https://salcastoro.com",{"twitter":161,"github":162,"linkedin":163},"s_castoro","scastoro","sal-castoro-3b1050178","Senior Frontend Developer","Independent","United States",[168,169,170,171,172,173,174],"JavaScript","TypeScript","React","Node.js","Web Performance","Accessibility","Astro",[176],"en",true,"2024-01-01","src/content/authors/main-author.json","ee1251c9219fca1a"]