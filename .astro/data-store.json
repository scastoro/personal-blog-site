[["Map",1,2,9,10,126,127],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.7","content-config-digest","c090fabf20886887","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://your-domain.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark-dimmed\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,38,39,57,58,76,77,89,90,105,106],"getting-started-with-astro",{"id":11,"data":13,"body":34,"filePath":35,"digest":36,"legacyId":37,"deferredRender":27},{"title":14,"description":15,"pubDate":16,"updatedDate":17,"author":18,"tags":19,"category":24,"keywords":25,"draft":26,"featured":27,"heroImage":28,"heroImageAlt":29,"noindex":26,"nofollow":26,"difficulty":30,"twitterCard":31,"relatedPosts":32,"estimatedReadingTime":33},"Getting Started with Astro: A Modern Static Site Generator","Discover why Astro is revolutionizing static site generation with its partial hydration architecture and component-agnostic approach.",["Date","2024-01-15T00:00:00.000Z"],["Date","2024-01-20T00:00:00.000Z"],"Sal Castoro",[20,21,22,23],"astro","static-site-generator","web-development","javascript","Web Development",[],false,true,"/images/blog/astro-hero.jpg","Astro logo with space background","beginner","summary_large_image",[],8,"import Callout from '@/components/mdx/Callout.astro';\nimport CodeBlock from '@/components/mdx/CodeBlock.astro';\nimport Quote from '@/components/mdx/Quote.astro';\n\nAstro has been making waves in the web development community, and for good reason. This modern static site generator brings a fresh approach to building fast, content-focused websites with its innovative **partial hydration** architecture.\n\n## What Makes Astro Special?\n\n\u003CCallout type=\"tip\" title=\"Key Insight\">\nUnlike traditional frameworks that ship JavaScript by default, Astro ships zero JavaScript to the browser unless you explicitly opt-in. This results in blazing-fast loading times and improved Core Web Vitals.\n\u003C/Callout>\n\nAstro stands out from other static site generators in several key ways:\n\n### 1. Partial Hydration by Default\n\nTraditional React or Vue apps hydrate the entire page, even for static content. Astro only hydrates the components that actually need interactivity.\n\n\u003CCodeBlock language=\"astro\" filename=\"Component.astro\" title=\"Astro Component Example\">\n```astro\n---\n// This runs on the server only\nconst greeting = \"Hello, World!\";\n---\n\n\u003Ch1>{greeting}\u003C/h1>\n\u003CInteractiveCounter client:load />  \u003C!-- Only this gets hydrated -->\n\u003CStaticContent />                   \u003C!-- This stays static -->\n```\n\u003C/CodeBlock>\n\n### 2. Component Agnostic Architecture\n\nYou can use React, Vue, Svelte, or any other framework components within the same Astro project:\n\n\u003CCodeBlock language=\"astro\" filename=\"MixedComponents.astro\">\n```astro\n---\nimport ReactCounter from './ReactCounter.jsx';\nimport VueModal from './VueModal.vue';\nimport SvelteChart from './SvelteChart.svelte';\n---\n\n\u003Cdiv>\n  \u003CReactCounter client:visible />\n  \u003CVueModal client:click />\n  \u003CSvelteChart client:idle />\n\u003C/div>\n```\n\u003C/CodeBlock>\n\n## Performance Benefits\n\nThe numbers speak for themselves. Here's what you can expect with Astro:\n\n- **Lighthouse Score**: Consistently 95+ across all metrics\n- **First Contentful Paint**: Under 1.2 seconds\n- **Time to Interactive**: Minimal, since most content is static\n- **JavaScript Bundle**: Often under 50KB for initial load\n\n\u003CQuote author=\"Fred K. Schott\" source=\"Astro Documentation\" variant=\"pullquote\">\nAstro is designed for building content-rich websites like blogs, marketing sites, and documentation sites that prioritize loading speed over rich interactivity.\n\u003C/Quote>\n\n## When to Choose Astro\n\nAstro excels in specific scenarios:\n\n### ✅ Great for:\n- **Blogs and content sites** - Perfect for markdown-heavy sites\n- **Marketing websites** - Fast loading times improve conversion\n- **Documentation** - Static content with occasional interactivity\n- **E-commerce landing pages** - Speed matters for SEO and UX\n\n### ❌ Not ideal for:\n- **Heavy interactive apps** - Consider Next.js or Nuxt.js instead\n- **Real-time applications** - WebSocket-heavy apps need different tools\n- **Complex SPAs** - Traditional frameworks might be better\n\n## Getting Your First Astro Site Running\n\nLet's build a simple blog with Astro:\n\n\u003CCodeBlock language=\"bash\" title=\"Project Setup\">\n```bash\n# Create new Astro project\nnpm create astro@latest my-blog\n\n# Navigate to project\ncd my-blog\n\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n```\n\u003C/CodeBlock>\n\n\u003CCallout type=\"info\">\nThe Astro CLI will ask you several questions about your project setup. For a blog, choose the \"Blog\" template to get started quickly with example posts and layouts.\n\u003C/Callout>\n\n### Project Structure\n\nHere's what your Astro project structure will look like:\n\n\u003CCodeBlock language=\"text\" title=\"Astro Project Structure\">\n```\nsrc/\n├── components/     # Reusable components\n├── content/        # Markdown/MDX content\n├── layouts/        # Page layouts\n├── pages/          # Routes (file-based routing)\n└── styles/         # Global styles\n\npublic/             # Static assets\nastro.config.mjs    # Astro configuration\npackage.json        # Dependencies\n```\n\u003C/CodeBlock>\n\n## Advanced Features\n\n### Content Collections\n\nAstro's content collections provide type-safe content management:\n\n\u003CCodeBlock language=\"typescript\" filename=\"src/content/config.ts\">\n```typescript\nimport { defineCollection, z } from 'astro:content';\n\nconst blogCollection = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    description: z.string(),\n    pubDate: z.date(),\n    tags: z.array(z.string()),\n    draft: z.boolean().default(false),\n  }),\n});\n\nexport const collections = {\n  blog: blogCollection,\n};\n```\n\u003C/CodeBlock>\n\n### Client Directives\n\nControl exactly when and how components hydrate:\n\n- `client:load` - Hydrate immediately on page load\n- `client:idle` - Hydrate when browser is idle\n- `client:visible` - Hydrate when component enters viewport\n- `client:media` - Hydrate based on media queries\n\n\u003CCallout type=\"warning\" title=\"Performance Tip\">\nBe selective with client directives. Each directive adds JavaScript to your bundle. Only hydrate components that truly need interactivity.\n\u003C/Callout>\n\n## Conclusion\n\nAstro represents a paradigm shift in how we think about static site generation. By defaulting to static HTML and allowing selective hydration, it offers the best of both worlds: the performance of static sites with the flexibility of modern JavaScript frameworks.\n\nWhether you're building a personal blog, company website, or documentation site, Astro's approach to partial hydration and its extensive ecosystem make it a compelling choice for modern web development.\n\nReady to give Astro a try? Start with their excellent [documentation](https://docs.astro.build) and join the growing community of developers who are building faster, more efficient websites.\n\n---\n\n*Have you tried Astro for your projects? Share your experience in the comments below or reach out on [Twitter](https://x.com/s_castoro).*","src/content/blog/getting-started-with-astro.mdx","d46fe9f6aee99a0d","getting-started-with-astro.mdx","typescript-best-practices-2024",{"id":38,"data":40,"body":53,"filePath":54,"digest":55,"legacyId":56,"deferredRender":27},{"title":41,"description":42,"pubDate":43,"author":18,"tags":44,"category":48,"keywords":49,"draft":26,"featured":26,"noindex":26,"nofollow":26,"difficulty":50,"twitterCard":31,"relatedPosts":51,"estimatedReadingTime":52},"TypeScript Best Practices for 2024: Writing Better, Safer Code","Learn the essential TypeScript best practices that will make your code more maintainable, type-safe, and developer-friendly in 2024.",["Date","2024-02-10T00:00:00.000Z"],[45,23,46,47],"typescript","best-practices","code-quality","Programming",[],"intermediate",[],12,"import Callout from '@/components/mdx/Callout.astro';\nimport CodeBlock from '@/components/mdx/CodeBlock.astro';\nimport Quote from '@/components/mdx/Quote.astro';\n\nTypeScript has evolved significantly since its introduction, and 2024 brings even more powerful features and established patterns. Whether you're new to TypeScript or looking to level up your skills, these best practices will help you write more robust and maintainable code.\n\n## 1. Embrace Strict Mode Configuration\n\nThe foundation of good TypeScript starts with proper configuration. Always enable strict mode and additional checks:\n\n\u003CCodeBlock language=\"json\" filename=\"tsconfig.json\" title=\"Recommended TypeScript Configuration\">\n```json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"exactOptionalPropertyTypes\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"allowUnusedLabels\": false,\n    \"allowUnreachableCode\": false\n  }\n}\n```\n\u003C/CodeBlock>\n\n\u003CCallout type=\"tip\" title=\"Why Strict Mode Matters\">\nStrict mode catches common errors at compile time rather than runtime, leading to fewer bugs and more predictable code behavior.\n\u003C/Callout>\n\n## 2. Prefer Type Inference Over Explicit Types\n\nLet TypeScript do the heavy lifting. Explicit types are often unnecessary and can make code harder to maintain:\n\n\u003CCodeBlock language=\"typescript\" title=\"Type Inference Examples\">\n```typescript\n// ❌ Unnecessary explicit types\nconst count: number = 42;\nconst message: string = \"Hello, World!\";\nconst isActive: boolean = true;\n\n// ✅ Let TypeScript infer\nconst count = 42;\nconst message = \"Hello, World!\";\nconst isActive = true;\n\n// ✅ Explicit types when inference isn't clear\nconst users: User[] = []; // Empty array needs type\nconst callback: (id: string) => Promise\u003CUser> = fetchUser;\n```\n\u003C/CodeBlock>\n\n## 3. Use Union Types and Type Guards\n\nUnion types provide flexibility while maintaining type safety:\n\n\u003CCodeBlock language=\"typescript\" title=\"Union Types and Type Guards\">\n```typescript\ntype Status = 'idle' | 'loading' | 'success' | 'error';\n\ninterface ApiResponse\u003CT> {\n  status: Status;\n  data?: T;\n  error?: string;\n}\n\n// Type guard function\nfunction isSuccessResponse\u003CT>(response: ApiResponse\u003CT>): response is ApiResponse\u003CT> & { status: 'success'; data: T } {\n  return response.status === 'success' && response.data !== undefined;\n}\n\n// Usage with type narrowing\nfunction handleResponse\u003CT>(response: ApiResponse\u003CT>) {\n  if (isSuccessResponse(response)) {\n    // TypeScript knows data exists and error doesn't\n    console.log(response.data.someProperty);\n  } else if (response.status === 'error') {\n    // TypeScript knows error might exist\n    console.error(response.error ?? 'Unknown error');\n  }\n}\n```\n\u003C/CodeBlock>\n\n## 4. Leverage Template Literal Types\n\nTemplate literal types enable powerful string manipulation at the type level:\n\n\u003CCodeBlock language=\"typescript\" title=\"Template Literal Types\">\n```typescript\n// Dynamic API endpoint types\ntype HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';\ntype ApiVersion = 'v1' | 'v2';\ntype Endpoint = 'users' | 'posts' | 'comments';\n\ntype ApiUrl = `/api/${ApiVersion}/${Endpoint}`;\n// Result: \"/api/v1/users\" | \"/api/v1/posts\" | ... etc\n\n// CSS custom properties\ntype CSSCustomProperty = `--${string}`;\n\ninterface Theme {\n  [key: CSSCustomProperty]: string;\n}\n\nconst theme: Theme = {\n  '--primary-color': '#007bff',\n  '--secondary-color': '#6c757d',\n  // '--invalid': 'red', // ❌ TypeScript error: doesn't start with --\n};\n```\n\u003C/CodeBlock>\n\n## 5. Master Utility Types\n\nTypeScript's built-in utility types are incredibly powerful for type transformations:\n\n\u003CCodeBlock language=\"typescript\" title=\"Utility Types in Action\">\n```typescript\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  password: string;\n  isActive: boolean;\n}\n\n// Create types from existing ones\ntype PublicUser = Omit\u003CUser, 'password'>; // All props except password\ntype UserUpdate = Partial\u003CPick\u003CUser, 'name' | 'email'>>; // Optional name and email\ntype UserCreation = Omit\u003CUser, 'id'>; // All props except id\n\n// Advanced utility type combinations\ntype NonNullable\u003CT> = T extends null | undefined ? never : T;\ntype RequiredUser = Required\u003CUser>; // All properties required\ntype ReadonlyUser = Readonly\u003CUser>; // All properties readonly\n\n// Custom utility types\ntype DeepPartial\u003CT> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial\u003CT[P]> : T[P];\n};\n```\n\u003C/CodeBlock>\n\n\u003CQuote author=\"Anders Hejlsberg\" source=\"TypeScript Creator\" variant=\"large\">\nThe goal of TypeScript is to be a better JavaScript for application-scale development.\n\u003C/Quote>\n\n## 6. Implement Branded Types for Type Safety\n\nBranded types prevent mixing up similar primitive types:\n\n\u003CCodeBlock language=\"typescript\" title=\"Branded Types\">\n```typescript\n// Brand primitive types\ntype UserId = string & { readonly brand: unique symbol };\ntype ProductId = string & { readonly brand: unique symbol };\ntype Email = string & { readonly brand: unique symbol };\n\n// Factory functions for type safety\nfunction createUserId(id: string): UserId {\n  if (!id || id.length \u003C 3) {\n    throw new Error('Invalid user ID');\n  }\n  return id as UserId;\n}\n\nfunction createEmail(email: string): Email {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    throw new Error('Invalid email format');\n  }\n  return email as Email;\n}\n\n// Usage prevents mixing up similar types\nfunction getUserById(userId: UserId): Promise\u003CUser> {\n  // Implementation\n}\n\nconst userId = createUserId('user_123');\nconst productId = 'product_456' as ProductId;\n\ngetUserById(userId); // ✅ Correct\n// getUserById(productId); // ❌ TypeScript error: wrong type\n```\n\u003C/CodeBlock>\n\n## 7. Use Discriminated Unions for Complex State\n\nDiscriminated unions make state management more predictable:\n\n\u003CCodeBlock language=\"typescript\" title=\"Discriminated Unions\">\n```typescript\n// State management with discriminated unions\ntype LoadingState = {\n  kind: 'loading';\n  progress?: number;\n};\n\ntype SuccessState = {\n  kind: 'success';\n  data: User[];\n  lastUpdated: Date;\n};\n\ntype ErrorState = {\n  kind: 'error';\n  error: string;\n  retryCount: number;\n};\n\ntype AsyncState = LoadingState | SuccessState | ErrorState;\n\n// Type-safe state handling\nfunction renderUserList(state: AsyncState) {\n  switch (state.kind) {\n    case 'loading':\n      return `Loading... ${state.progress ?? 0}%`;\n    \n    case 'success':\n      return `Found ${state.data.length} users (updated: ${state.lastUpdated})`;\n    \n    case 'error':\n      return `Error: ${state.error} (attempts: ${state.retryCount})`;\n    \n    default:\n      // TypeScript ensures exhaustive checking\n      const _exhaustive: never = state;\n      return _exhaustive;\n  }\n}\n```\n\u003C/CodeBlock>\n\n## 8. Create Composable and Reusable Types\n\nBuild a library of reusable types for your domain:\n\n\u003CCodeBlock language=\"typescript\" title=\"Composable Types\">\n```typescript\n// Base entity type\ninterface Entity {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Timestamped mixin\ntype WithTimestamps\u003CT> = T & {\n  createdAt: Date;\n  updatedAt: Date;\n};\n\n// Soft delete mixin\ntype WithSoftDelete\u003CT> = T & {\n  deletedAt?: Date;\n  isDeleted: boolean;\n};\n\n// Auditable mixin\ntype WithAudit\u003CT> = T & {\n  createdBy: string;\n  updatedBy: string;\n};\n\n// Compose types\ntype User = WithTimestamps\u003CWithSoftDelete\u003CWithAudit\u003C{\n  name: string;\n  email: string;\n}>>>;\n\n// Generic API response wrapper\ntype ApiResponse\u003CT> = {\n  success: boolean;\n  data?: T;\n  error?: string;\n  metadata?: {\n    page?: number;\n    limit?: number;\n    total?: number;\n  };\n};\n```\n\u003C/CodeBlock>\n\n## 9. Handle Async Code with Proper Types\n\nType async operations correctly to prevent common pitfalls:\n\n\u003CCodeBlock language=\"typescript\" title=\"Async Type Safety\">\n```typescript\n// Generic async result type\ntype Result\u003CT, E = Error> = {\n  success: true;\n  data: T;\n} | {\n  success: false;\n  error: E;\n};\n\n// Async function with proper error handling\nasync function fetchUserSafely(id: string): Promise\u003CResult\u003CUser, string>> {\n  try {\n    const response = await fetch(`/api/users/${id}`);\n    if (!response.ok) {\n      return { success: false, error: `HTTP ${response.status}` };\n    }\n    \n    const user = await response.json() as User;\n    return { success: true, data: user };\n  } catch (error) {\n    return { \n      success: false, \n      error: error instanceof Error ? error.message : 'Unknown error' \n    };\n  }\n}\n\n// Type-safe async/await usage\nasync function handleUser() {\n  const result = await fetchUserSafely('123');\n  \n  if (result.success) {\n    // TypeScript knows result.data exists\n    console.log(result.data.name);\n  } else {\n    // TypeScript knows result.error exists\n    console.error(result.error);\n  }\n}\n```\n\u003C/CodeBlock>\n\n## 10. Performance and Bundle Optimization\n\nKeep your TypeScript performant and your bundles lean:\n\n\u003CCallout type=\"warning\" title=\"Performance Tips\">\n- Use `import type` for type-only imports to avoid runtime dependencies\n- Prefer interfaces over types for object shapes (better performance)\n- Use const assertions to narrow types without runtime overhead\n\u003C/Callout>\n\n\u003CCodeBlock language=\"typescript\" title=\"Optimization Examples\">\n```typescript\n// Type-only imports (removed at compile time)\nimport type { User } from './types';\nimport type { ComponentProps } from 'react';\n\n// Runtime import only when needed\nimport { validateEmail } from './utils';\n\n// Const assertions for precise types\nconst themes = ['light', 'dark', 'auto'] as const;\ntype Theme = typeof themes[number]; // 'light' | 'dark' | 'auto'\n\n// Interface over type for better performance\ninterface UserConfig {\n  theme: Theme;\n  language: string;\n  notifications: boolean;\n}\n\n// Type alias for computed types\ntype UserConfigKeys = keyof UserConfig;\n```\n\u003C/CodeBlock>\n\n## Conclusion\n\nTypeScript continues to evolve, but these fundamental practices remain essential for writing maintainable, type-safe code. By following these patterns, you'll:\n\n- Catch more errors at compile time\n- Improve code documentation through types\n- Enable better IDE support and refactoring\n- Build more robust applications\n\nThe key is to start with strict configuration, embrace TypeScript's inference capabilities, and gradually adopt advanced patterns as your codebase grows.\n\n\u003CCallout type=\"success\" title=\"Next Steps\">\nPractice these patterns in a small project, set up strict TypeScript configuration in your next project, and consider adopting a consistent style guide across your team.\n\u003C/Callout>\n\nRemember: TypeScript is a tool to make JavaScript development more enjoyable and productive. Don't fight the type system—work with it, and it will reward you with better code and fewer bugs.\n\n---\n\n*What TypeScript patterns have you found most helpful in your projects? Share your experiences and tips in the comments!*","src/content/blog/typescript-best-practices-2024.mdx","06b3ab8c4eaa2787","typescript-best-practices-2024.mdx","building-accessible-components",{"id":57,"data":59,"body":72,"filePath":73,"digest":74,"legacyId":75,"deferredRender":27},{"title":60,"description":61,"pubDate":62,"author":18,"tags":63,"category":24,"keywords":69,"draft":26,"featured":26,"noindex":26,"nofollow":26,"difficulty":50,"twitterCard":31,"relatedPosts":70,"estimatedReadingTime":71},"Building Accessible Web Components: A Practical Guide","Learn how to create inclusive web components that work for everyone, with practical examples and testing strategies for better accessibility.",["Date","2024-03-05T00:00:00.000Z"],[64,65,66,67,68],"accessibility","web-components","a11y","inclusive-design","html",[],[],10,"import Callout from '@/components/mdx/Callout.astro';\nimport CodeBlock from '@/components/mdx/CodeBlock.astro';\n\nWeb accessibility isn't just a nice-to-have feature—it's essential for creating inclusive digital experiences. When building web components, accessibility should be baked in from the start, not added as an afterthought.\n\n## The Foundation: Semantic HTML\n\nBefore diving into complex ARIA attributes, start with semantic HTML. It provides built-in accessibility features that work across all assistive technologies:\n\n\u003CCodeBlock language=\"html\" title=\"Semantic Button Component\">\n```html\n\u003C!-- ❌ Poor accessibility -->\n\u003Cdiv class=\"button\" onclick=\"handleClick()\">\n  Submit\n\u003C/div>\n\n\u003C!-- ✅ Accessible by default -->\n\u003Cbutton type=\"submit\" onclick=\"handleClick()\">\n  Submit\n\u003C/button>\n```\n\u003C/CodeBlock>\n\n\u003CCallout type=\"tip\" title=\"The First Rule of ARIA\">\nIf you can use a native HTML element or attribute with the semantics and behavior you require already built in, instead of re-purposing an element and adding an ARIA role, state, or property to make it accessible, then do so.\n\u003C/Callout>\n\n## Building an Accessible Modal Component\n\nLet's build a modal component that follows accessibility best practices:\n\n\u003CCodeBlock language=\"html\" filename=\"AccessibleModal.astro\" title=\"Accessible Modal Structure\">\n```html\n\u003Cdiv \n  role=\"dialog\" \n  aria-labelledby=\"modal-title\"\n  aria-describedby=\"modal-description\"\n  aria-modal=\"true\"\n  class=\"modal\"\n  style=\"display: none;\"\n>\n  \u003C!-- Focus trap container -->\n  \u003Cdiv class=\"modal-content\">\n    \u003C!-- Modal header -->\n    \u003Cheader class=\"modal-header\">\n      \u003Ch2 id=\"modal-title\">Confirm Action\u003C/h2>\n      \u003Cbutton \n        type=\"button\" \n        class=\"modal-close\"\n        aria-label=\"Close dialog\"\n        onclick=\"closeModal()\"\n      >\n        \u003Cspan aria-hidden=\"true\">&times;\u003C/span>\n      \u003C/button>\n    \u003C/header>\n    \n    \u003C!-- Modal body -->\n    \u003Cdiv id=\"modal-description\" class=\"modal-body\">\n      Are you sure you want to delete this item? This action cannot be undone.\n    \u003C/div>\n    \n    \u003C!-- Modal actions -->\n    \u003Cfooter class=\"modal-footer\">\n      \u003Cbutton type=\"button\" onclick=\"closeModal()\">\n        Cancel\n      \u003C/button>\n      \u003Cbutton type=\"button\" class=\"btn-danger\" onclick=\"confirmAction()\">\n        Delete\n      \u003C/button>\n    \u003C/footer>\n  \u003C/div>\n\u003C/div>\n```\n\u003C/CodeBlock>\n\nThe JavaScript for this modal needs to handle several accessibility requirements:\n\n\u003CCodeBlock language=\"javascript\" title=\"Modal Accessibility Logic\">\n```javascript\nclass AccessibleModal {\n  constructor(modalElement) {\n    this.modal = modalElement;\n    this.focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])';\n    this.previouslyFocused = null;\n  }\n  \n  open() {\n    // Save current focus\n    this.previouslyFocused = document.activeElement;\n    \n    // Show modal\n    this.modal.style.display = 'block';\n    \n    // Trap focus\n    this.trapFocus();\n    \n    // Focus first focusable element\n    const firstFocusable = this.modal.querySelector(this.focusableElements);\n    firstFocusable?.focus();\n    \n    // Prevent body scroll\n    document.body.style.overflow = 'hidden';\n    \n    // Listen for escape key\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n  }\n  \n  close() {\n    // Hide modal\n    this.modal.style.display = 'none';\n    \n    // Restore focus\n    this.previouslyFocused?.focus();\n    \n    // Restore body scroll\n    document.body.style.overflow = '';\n    \n    // Remove event listeners\n    document.removeEventListener('keydown', this.handleKeyDown.bind(this));\n  }\n  \n  trapFocus() {\n    const focusableContent = this.modal.querySelectorAll(this.focusableElements);\n    const firstFocusable = focusableContent[0];\n    const lastFocusable = focusableContent[focusableContent.length - 1];\n    \n    this.modal.addEventListener('keydown', (e) => {\n      if (e.key === 'Tab') {\n        if (e.shiftKey) {\n          if (document.activeElement === firstFocusable) {\n            lastFocusable.focus();\n            e.preventDefault();\n          }\n        } else {\n          if (document.activeElement === lastFocusable) {\n            firstFocusable.focus();\n            e.preventDefault();\n          }\n        }\n      }\n    });\n  }\n  \n  handleKeyDown(e) {\n    if (e.key === 'Escape') {\n      this.close();\n    }\n  }\n}\n```\n\u003C/CodeBlock>\n\n## Creating an Accessible Form Component\n\nForms are critical for user interaction and require careful attention to accessibility:\n\n\u003CCodeBlock language=\"html\" title=\"Accessible Form Fields\">\n```html\n\u003Cform class=\"accessible-form\">\n  \u003C!-- Text input with proper labeling -->\n  \u003Cdiv class=\"form-field\">\n    \u003Clabel for=\"email\">\n      Email Address\n      \u003Cspan aria-label=\"required\">*\u003C/span>\n    \u003C/label>\n    \u003Cinput \n      type=\"email\" \n      id=\"email\" \n      name=\"email\"\n      required\n      aria-describedby=\"email-error email-help\"\n      aria-invalid=\"false\"\n    />\n    \u003Cdiv id=\"email-help\" class=\"help-text\">\n      We'll never share your email with third parties.\n    \u003C/div>\n    \u003Cdiv id=\"email-error\" class=\"error-text\" role=\"alert\" style=\"display: none;\">\n      Please enter a valid email address.\n    \u003C/div>\n  \u003C/div>\n  \n  \u003C!-- Password with show/hide toggle -->\n  \u003Cdiv class=\"form-field\">\n    \u003Clabel for=\"password\">Password\u003C/label>\n    \u003Cdiv class=\"password-wrapper\">\n      \u003Cinput \n        type=\"password\" \n        id=\"password\" \n        name=\"password\"\n        required\n        aria-describedby=\"password-requirements\"\n      />\n      \u003Cbutton \n        type=\"button\" \n        class=\"password-toggle\"\n        aria-label=\"Show password\"\n        onclick=\"togglePassword()\"\n      >\n        \u003Cspan aria-hidden=\"true\">👁\u003C/span>\n      \u003C/button>\n    \u003C/div>\n    \u003Cdiv id=\"password-requirements\" class=\"help-text\">\n      Must be at least 8 characters with uppercase, lowercase, and numbers.\n    \u003C/div>\n  \u003C/div>\n  \n  \u003C!-- Checkbox with custom styling -->\n  \u003Cdiv class=\"form-field\">\n    \u003Clabel class=\"checkbox-label\">\n      \u003Cinput type=\"checkbox\" id=\"terms\" name=\"terms\" required />\n      \u003Cspan class=\"checkbox-custom\" aria-hidden=\"true\">\u003C/span>\n      I agree to the \n      \u003Ca href=\"/terms\" target=\"_blank\" rel=\"noopener\">\n        Terms of Service\n        \u003Cspan class=\"sr-only\">(opens in new tab)\u003C/span>\n      \u003C/a>\n    \u003C/label>\n  \u003C/div>\n  \n  \u003Cbutton type=\"submit\">Create Account\u003C/button>\n\u003C/form>\n```\n\u003C/CodeBlock>\n\n## Implementing Live Regions for Dynamic Content\n\nLive regions announce dynamic content changes to screen readers:\n\n\u003CCodeBlock language=\"html\" title=\"Live Region Examples\">\n```html\n\u003C!-- Status updates -->\n\u003Cdiv \n  id=\"status\" \n  aria-live=\"polite\" \n  aria-atomic=\"true\"\n  class=\"sr-only\"\n>\n  \u003C!-- Status messages appear here -->\n\u003C/div>\n\n\u003C!-- Urgent alerts -->\n\u003Cdiv \n  id=\"alerts\" \n  aria-live=\"assertive\" \n  aria-atomic=\"true\"\n  role=\"alert\"\n  class=\"sr-only\"\n>\n  \u003C!-- Critical messages appear here -->\n\u003C/div>\n\n\u003C!-- Form validation feedback -->\n\u003Cdiv class=\"form-field\">\n  \u003Clabel for=\"username\">Username\u003C/label>\n  \u003Cinput \n    type=\"text\" \n    id=\"username\" \n    name=\"username\"\n    onblur=\"validateUsername()\"\n  />\n  \u003Cdiv \n    id=\"username-feedback\" \n    aria-live=\"polite\"\n    class=\"feedback\"\n  >\n    \u003C!-- Validation messages appear here -->\n  \u003C/div>\n\u003C/div>\n```\n\u003C/CodeBlock>\n\n\u003CCodeBlock language=\"javascript\" title=\"Live Region Usage\">\n```javascript\nfunction announceStatus(message) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n}\n\nfunction announceAlert(message) {\n  const alerts = document.getElementById('alerts');\n  alerts.textContent = message;\n}\n\nfunction validateUsername() {\n  const username = document.getElementById('username').value;\n  const feedback = document.getElementById('username-feedback');\n  \n  if (username.length \u003C 3) {\n    feedback.textContent = 'Username must be at least 3 characters.';\n    feedback.className = 'feedback error';\n  } else {\n    feedback.textContent = 'Username is available.';\n    feedback.className = 'feedback success';\n  }\n}\n\n// Usage examples\nannounceStatus('Profile updated successfully');\nannounceAlert('Connection lost. Please check your internet connection.');\n```\n\u003C/CodeBlock>\n\n## Skip Links and Navigation\n\nProvide keyboard users with efficient navigation options:\n\n\u003CCodeBlock language=\"html\" title=\"Skip Navigation Links\">\n```html\n\u003Cbody>\n  \u003C!-- Skip links (initially hidden, visible on focus) -->\n  \u003Cdiv class=\"skip-links\">\n    \u003Ca href=\"#main-content\" class=\"skip-link\">Skip to main content\u003C/a>\n    \u003Ca href=\"#navigation\" class=\"skip-link\">Skip to navigation\u003C/a>\n    \u003Ca href=\"#search\" class=\"skip-link\">Skip to search\u003C/a>\n  \u003C/div>\n  \n  \u003Cheader>\n    \u003Cnav id=\"navigation\" aria-label=\"Main navigation\">\n      \u003C!-- Navigation content -->\n    \u003C/nav>\n  \u003C/header>\n  \n  \u003Cmain id=\"main-content\">\n    \u003C!-- Main page content -->\n  \u003C/main>\n\u003C/body>\n```\n\u003C/CodeBlock>\n\n\u003CCodeBlock language=\"css\" title=\"Skip Link Styles\">\n```css\n.skip-links {\n  position: absolute;\n  top: -100px;\n  left: 0;\n  z-index: 1000;\n}\n\n.skip-link {\n  position: absolute;\n  left: -10000px;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n}\n\n.skip-link:focus {\n  position: static;\n  left: auto;\n  width: auto;\n  height: auto;\n  overflow: visible;\n  background: #000;\n  color: #fff;\n  padding: 8px 16px;\n  text-decoration: none;\n  border-radius: 0 0 4px 4px;\n}\n```\n\u003C/CodeBlock>\n\n## Testing Your Accessible Components\n\nAccessibility testing should be part of your development workflow:\n\n\u003CCallout type=\"info\" title=\"Testing Tools\">\n- **Automated**: axe-core, Lighthouse accessibility audit, WAVE\n- **Manual**: Keyboard navigation, screen reader testing (NVDA, VoiceOver)\n- **User testing**: Include users with disabilities in your testing process\n\u003C/Callout>\n\n\u003CCodeBlock language=\"javascript\" title=\"Automated Testing with axe-core\">\n```javascript\n// Install: npm install --save-dev @axe-core/playwright\nimport { injectAxe, checkA11y } from '@axe-core/playwright';\n\ntest('Modal should be accessible', async ({ page }) => {\n  await page.goto('/modal-demo');\n  await injectAxe(page);\n  \n  // Open modal\n  await page.click('[data-testid=\"open-modal\"]');\n  \n  // Check accessibility\n  await checkA11y(page, '[role=\"dialog\"]', {\n    detailedReport: true,\n    detailedReportOptions: { html: true },\n  });\n  \n  // Test keyboard navigation\n  await page.keyboard.press('Tab');\n  await expect(page.locator('[data-testid=\"modal-close\"]')).toBeFocused();\n  \n  // Test escape key\n  await page.keyboard.press('Escape');\n  await expect(page.locator('[role=\"dialog\"]')).toBeHidden();\n});\n```\n\u003C/CodeBlock>\n\n## Common Accessibility Patterns\n\nHere are essential patterns to implement:\n\n### Focus Management\n- Always provide visible focus indicators\n- Manage focus for single-page applications\n- Implement focus traps for modals and menus\n\n### Color and Contrast\n- Ensure 4.5:1 contrast ratio for normal text\n- Use color plus additional indicators (icons, text)\n- Test with color blindness simulators\n\n### Responsive Design\n- Support zoom up to 200% without horizontal scrolling\n- Ensure touch targets are at least 44px × 44px\n- Provide adequate spacing between interactive elements\n\n\u003CCallout type=\"warning\" title=\"Remember\">\nAccessibility is not a one-time task—it's an ongoing commitment. Regular testing, user feedback, and staying current with WCAG guidelines are essential for maintaining accessible experiences.\n\u003C/Callout>\n\n## Conclusion\n\nBuilding accessible web components requires thoughtful planning and attention to detail, but the benefits extend far beyond compliance. Accessible components are often more robust, maintainable, and provide better user experiences for everyone.\n\nStart with semantic HTML, enhance with ARIA when necessary, and test with real users and assistive technologies. Remember that accessibility is not just about screen readers—it includes motor disabilities, cognitive disabilities, and temporary impairments too.\n\nBy following these practices and making accessibility a core part of your development process, you'll create web experiences that truly work for everyone.\n\n---\n\n*Have you implemented any of these accessibility patterns in your projects? What challenges have you faced, and what tools have you found most helpful for accessibility testing?*","src/content/blog/building-accessible-components.mdx","4f5eee4c75db1262","building-accessible-components.mdx","typescript-tips-for-better-code",{"id":76,"data":78,"body":85,"filePath":86,"digest":87,"legacyId":88,"deferredRender":27},{"title":79,"description":80,"pubDate":81,"author":18,"tags":82,"keywords":83,"draft":26,"featured":26,"noindex":26,"nofollow":26,"twitterCard":31,"relatedPosts":84},"5 TypeScript Tips for Writing Better Code","Practical TypeScript techniques that will make your code more maintainable, type-safe, and easier to work with.",["Date","2024-01-08T00:00:00.000Z"],[45,23,46,22],[],[],"# 5 TypeScript Tips for Writing Better Code\n\nTypeScript has transformed how I write JavaScript. Here are five practical tips I've learned that have significantly improved my code quality and development experience.\n\n## 1. Use Union Types for Better API Design\n\nInstead of accepting `any` or overly broad types, use union types to be explicit about what your functions accept:\n\n```typescript\ntype Theme = 'light' | 'dark' | 'auto';\ntype ButtonVariant = 'primary' | 'secondary' | 'outline';\n\nfunction setTheme(theme: Theme) {\n  // TypeScript ensures only valid themes are passed\n}\n```\n\n## 2. Leverage Template Literal Types\n\nTemplate literal types are incredibly powerful for creating type-safe string patterns:\n\n```typescript\ntype EventName = `on${Capitalize\u003Cstring>}`;\ntype APIEndpoint = `/api/v1/${string}`;\n\n// This ensures proper event naming\nconst handleClick: EventName = 'onClick'; // ✓\nconst handleHover: EventName = 'onhover'; // ✗ TypeScript error\n```\n\n## 3. Use `satisfies` for Better Type Inference\n\nThe `satisfies` operator helps maintain type safety while preserving literal types:\n\n```typescript\nconst config = {\n  apiUrl: 'https://api.example.com',\n  timeout: 5000,\n  retries: 3\n} satisfies Record\u003Cstring, string | number>;\n\n// TypeScript knows config.timeout is a number, not just string | number\n```\n\n## 4. Create Branded Types for Domain-Specific Values\n\nBranded types prevent mixing up similar primitive types:\n\n```typescript\ntype UserId = string & { __brand: 'UserId' };\ntype PostId = string & { __brand: 'PostId' };\n\nfunction getUser(id: UserId) { /* ... */ }\nfunction getPost(id: PostId) { /* ... */ }\n\n// This prevents accidentally mixing up IDs\nconst userId = 'user_123' as UserId;\nconst postId = 'post_456' as PostId;\n\ngetUser(postId); // TypeScript error!\n```\n\n## 5. Use Utility Types for Transformations\n\nTypeScript's built-in utility types can save you from writing complex type definitions:\n\n```typescript\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  isActive: boolean;\n}\n\n// Create variations without repeating yourself\ntype PartialUser = Partial\u003CUser>; // All properties optional\ntype UserUpdate = Pick\u003CUser, 'name' | 'email'>; // Only specific props\ntype UserSummary = Omit\u003CUser, 'isActive'>; // Exclude specific props\n```\n\n## Bonus: Generic Constraints\n\nUse generic constraints to create flexible yet type-safe functions:\n\n```typescript\nfunction getValue\u003CT extends Record\u003Cstring, any>, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] {\n  return obj[key];\n}\n\nconst user = { name: 'John', age: 30 };\nconst name = getValue(user, 'name'); // TypeScript knows this is string\n```\n\n## Wrapping Up\n\nThese techniques have made my TypeScript code more robust and easier to maintain. The key is to let TypeScript's type system work for you, not against you. Start with strict type checking enabled and gradually adopt these patterns as they become natural.\n\nRemember: good TypeScript isn't about having the most complex types – it's about expressing your intent clearly and catching errors before they reach production.","src/content/blog/typescript-tips-for-better-code.mdx","af87d00582002a11","typescript-tips-for-better-code.mdx","web-performance-optimization-guide",{"id":89,"data":91,"body":101,"filePath":102,"digest":103,"legacyId":104,"deferredRender":27},{"title":92,"description":93,"pubDate":94,"author":18,"tags":95,"keywords":99,"draft":26,"featured":26,"noindex":26,"nofollow":26,"twitterCard":31,"relatedPosts":100},"Web Performance Optimization: A Practical Guide","Learn practical techniques to improve your website's performance, from Core Web Vitals to advanced optimization strategies.",["Date","2024-01-22T00:00:00.000Z"],[96,22,97,98],"performance","optimization","core-web-vitals",[],[],"# Web Performance Optimization: A Practical Guide\n\nWebsite performance isn't just about user experience – it directly impacts your site's search rankings, conversion rates, and overall success. Here's what I've learned from optimizing dozens of websites.\n\n## Understanding Core Web Vitals\n\nGoogle's Core Web Vitals are the foundation of modern web performance:\n\n### Largest Contentful Paint (LCP)\n- **Target**: Under 2.5 seconds\n- **Focus**: Loading performance of main content\n- **Quick wins**: Optimize images, reduce server response times\n\n### First Input Delay (FID) / Interaction to Next Paint (INP)\n- **Target**: Under 100ms (FID) / Under 200ms (INP)\n- **Focus**: Interactivity and responsiveness\n- **Quick wins**: Minimize JavaScript execution time\n\n### Cumulative Layout Shift (CLS)\n- **Target**: Under 0.1\n- **Focus**: Visual stability\n- **Quick wins**: Set dimensions for images and videos\n\n## Image Optimization Strategies\n\nImages often account for 50-70% of page weight. Here's how to optimize them:\n\n```html\n\u003C!-- Use modern formats with fallbacks -->\n\u003Cpicture>\n  \u003Csource srcset=\"image.avif\" type=\"image/avif\">\n  \u003Csource srcset=\"image.webp\" type=\"image/webp\">\n  \u003Cimg src=\"image.jpg\" alt=\"Description\" loading=\"lazy\">\n\u003C/picture>\n```\n\n### Key Techniques:\n1. **Use appropriate formats**: WebP/AVIF for modern browsers\n2. **Implement lazy loading**: Load images as users scroll\n3. **Serve responsive images**: Different sizes for different screens\n4. **Compress aggressively**: Find the sweet spot between quality and size\n\n## JavaScript Performance\n\nModern websites often struggle with JavaScript performance. Here's how to optimize:\n\n### Code Splitting\n```javascript\n// Dynamic imports for route-based splitting\nconst LazyComponent = lazy(() => import('./LazyComponent'));\n\n// Feature-based splitting\nif (user.isAdmin) {\n  const adminModule = await import('./admin');\n  adminModule.initializeAdmin();\n}\n```\n\n### Tree Shaking\nEnsure your bundler eliminates unused code:\n```javascript\n// Good: Import only what you need\nimport { debounce } from 'lodash/debounce';\n\n// Bad: Imports entire library\nimport _ from 'lodash';\n```\n\n## CSS Optimization\n\nCSS can be a hidden performance bottleneck:\n\n1. **Critical CSS**: Inline above-the-fold styles\n2. **Remove unused CSS**: Use tools like PurgeCSS\n3. **Optimize animations**: Use `transform` and `opacity` for smooth animations\n4. **Minimize reflows**: Batch DOM changes\n\n## Caching Strategies\n\nEffective caching can dramatically improve repeat visit performance:\n\n### Static Assets\n```http\n# Long cache for versioned assets\nCache-Control: public, max-age=31536000, immutable\n\n# Short cache for HTML\nCache-Control: public, max-age=3600\n```\n\n### Service Workers\n```javascript\n// Cache-first strategy for assets\nself.addEventListener('fetch', (event) => {\n  if (event.request.destination === 'image') {\n    event.respondWith(\n      caches.match(event.request)\n        .then(response => response || fetch(event.request))\n    );\n  }\n});\n```\n\n## Measuring Performance\n\nYou can't optimize what you don't measure:\n\n### Tools I Use:\n- **Lighthouse**: Overall performance audit\n- **WebPageTest**: Detailed waterfall analysis\n- **Chrome DevTools**: Real-time performance profiling\n- **Real User Monitoring**: Production performance data\n\n### Key Metrics to Track:\n- Page load times across different devices\n- Time to first byte (TTFB)\n- JavaScript execution time\n- Bundle sizes over time\n\n## Quick Wins Checklist\n\nWhen optimizing any site, I start with these high-impact changes:\n\n- [ ] Enable gzip/brotli compression\n- [ ] Optimize and compress images\n- [ ] Minify CSS and JavaScript\n- [ ] Enable browser caching\n- [ ] Remove unused code\n- [ ] Use a Content Delivery Network (CDN)\n- [ ] Optimize web fonts loading\n- [ ] Implement lazy loading for images\n\n## Advanced Techniques\n\nFor sites that need extra performance:\n\n### Resource Hints\n```html\n\u003C!-- Preload critical resources -->\n\u003Clink rel=\"preload\" href=\"/critical.css\" as=\"style\">\n\n\u003C!-- Prefetch likely next page -->\n\u003Clink rel=\"prefetch\" href=\"/next-page.html\">\n\n\u003C!-- DNS prefetch for external domains -->\n\u003Clink rel=\"dns-prefetch\" href=\"//external-api.com\">\n```\n\n### HTTP/2 Push\nStrategic server push for critical resources (use carefully):\n```http\nLink: \u003C/critical.css>; rel=preload; as=style\n```\n\n## Conclusion\n\nPerformance optimization is an ongoing process, not a one-time task. Focus on measuring first, then optimizing the biggest bottlenecks. Remember that every millisecond counts – users notice the difference, and so do search engines.\n\nStart with the quick wins, measure the impact, and gradually implement more advanced techniques. Your users (and your conversion rates) will thank you.","src/content/blog/web-performance-optimization-guide.mdx","34775bc65301eb45","web-performance-optimization-guide.mdx","web-performance-optimization",{"id":105,"data":107,"body":122,"filePath":123,"digest":124,"legacyId":125,"deferredRender":27},{"title":108,"description":109,"pubDate":110,"author":18,"tags":111,"category":115,"keywords":116,"draft":26,"featured":27,"heroImage":117,"heroImageAlt":118,"noindex":26,"nofollow":26,"difficulty":119,"twitterCard":31,"relatedPosts":120,"estimatedReadingTime":121},"Web Performance Optimization: Core Web Vitals and Beyond","Master web performance optimization with practical techniques for improving Core Web Vitals, loading times, and user experience.",["Date","2024-03-20T00:00:00.000Z"],[96,112,97,113,114],"web-vitals","ux","seo","Performance",[],"/images/blog/performance-hero.jpg","Performance optimization dashboard showing metrics","advanced",[],15,"import Callout from '@/components/mdx/Callout.astro';\nimport CodeBlock from '@/components/mdx/CodeBlock.astro';\nimport Quote from '@/components/mdx/Quote.astro';\n\nWeb performance directly impacts user experience, conversion rates, and SEO rankings. With Google's Core Web Vitals now part of search ranking factors, optimizing performance has never been more critical for web success.\n\n## Understanding Core Web Vitals\n\nCore Web Vitals measure real-world user experience across three key dimensions:\n\n### Largest Contentful Paint (LCP)\nMeasures loading performance. Good LCP occurs within 2.5 seconds.\n\n### First Input Delay (FID)\nMeasures interactivity. Good FID is less than 100 milliseconds.\n\n### Cumulative Layout Shift (CLS)\nMeasures visual stability. Good CLS is less than 0.1.\n\n\u003CCallout type=\"info\" title=\"New Metric Alert\">\nIn 2024, Google introduced Interaction to Next Paint (INP) to replace FID, measuring responsiveness throughout the page lifecycle rather than just the first interaction.\n\u003C/Callout>\n\n## Optimizing Largest Contentful Paint (LCP)\n\nLCP typically involves the largest image, video, or text block. Here's how to optimize it:\n\n### 1. Optimize Images\n\n\u003CCodeBlock language=\"html\" title=\"Responsive Image Optimization\">\n```html\n\u003C!-- Modern image formats with fallbacks -->\n\u003Cpicture>\n  \u003Csource \n    srcset=\"/images/hero-320.avif 320w, /images/hero-640.avif 640w, /images/hero-1200.avif 1200w\"\n    sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 1200px\"\n    type=\"image/avif\"\n  >\n  \u003Csource \n    srcset=\"/images/hero-320.webp 320w, /images/hero-640.webp 640w, /images/hero-1200.webp 1200w\"\n    sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 1200px\"\n    type=\"image/webp\"\n  >\n  \u003Cimg \n    src=\"/images/hero-1200.jpg\"\n    srcset=\"/images/hero-320.jpg 320w, /images/hero-640.jpg 640w, /images/hero-1200.jpg 1200w\"\n    sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 1200px\"\n    alt=\"Hero image description\"\n    loading=\"eager\"\n    decoding=\"async\"\n    fetchpriority=\"high\"\n  >\n\u003C/picture>\n```\n\u003C/CodeBlock>\n\n### 2. Preload Critical Resources\n\n\u003CCodeBlock language=\"html\" title=\"Resource Preloading\">\n```html\n\u003Chead>\n  \u003C!-- Preload LCP image -->\n  \u003Clink rel=\"preload\" as=\"image\" href=\"/images/hero-1200.webp\" type=\"image/webp\">\n  \n  \u003C!-- Preload critical CSS -->\n  \u003Clink rel=\"preload\" as=\"style\" href=\"/css/critical.css\">\n  \n  \u003C!-- Preload critical fonts -->\n  \u003Clink rel=\"preload\" as=\"font\" href=\"/fonts/primary-font.woff2\" type=\"font/woff2\" crossorigin>\n  \n  \u003C!-- Preconnect to external domains -->\n  \u003Clink rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n  \u003Clink rel=\"preconnect\" href=\"https://cdn.example.com\">\n\u003C/head>\n```\n\u003C/CodeBlock>\n\n### 3. Optimize Critical Rendering Path\n\n\u003CCodeBlock language=\"html\" title=\"Critical CSS Inlining\">\n```html\n\u003Chead>\n  \u003C!-- Inline critical CSS for above-the-fold content -->\n  \u003Cstyle>\n    /* Critical styles for LCP element */\n    .hero {\n      width: 100%;\n      height: 60vh;\n      background-color: #f0f0f0; /* Prevent layout shift */\n    }\n    \n    .hero img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n  \u003C/style>\n  \n  \u003C!-- Load non-critical CSS asynchronously -->\n  \u003Clink rel=\"preload\" href=\"/css/main.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n  \u003Cnoscript>\u003Clink rel=\"stylesheet\" href=\"/css/main.css\">\u003C/noscript>\n\u003C/head>\n```\n\u003C/CodeBlock>\n\n## Improving Interaction to Next Paint (INP)\n\nINP measures how quickly a page responds to user interactions:\n\n### 1. Optimize JavaScript Execution\n\n\u003CCodeBlock language=\"javascript\" title=\"Efficient Event Handling\">\n```javascript\n// ❌ Synchronous, blocking operations\nfunction handleClick(event) {\n  const data = processLargeDataset(getData());\n  updateUI(data);\n  trackEvent('click', data);\n}\n\n// ✅ Async, non-blocking approach\nasync function handleClick(event) {\n  // Show immediate feedback\n  showLoadingState();\n  \n  // Break work into chunks\n  const data = await processLargeDatasetAsync(getData());\n  \n  // Use requestIdleCallback for non-critical work\n  if ('requestIdleCallback' in window) {\n    requestIdleCallback(() => {\n      trackEvent('click', data);\n    });\n  } else {\n    setTimeout(() => trackEvent('click', data), 0);\n  }\n  \n  updateUI(data);\n  hideLoadingState();\n}\n\n// Break large tasks into smaller chunks\nasync function processLargeDatasetAsync(dataset) {\n  const chunks = chunkArray(dataset, 100);\n  const results = [];\n  \n  for (const chunk of chunks) {\n    results.push(...processChunk(chunk));\n    \n    // Yield control back to the browser\n    await new Promise(resolve => setTimeout(resolve, 0));\n  }\n  \n  return results;\n}\n```\n\u003C/CodeBlock>\n\n### 2. Debounce and Throttle User Inputs\n\n\u003CCodeBlock language=\"javascript\" title=\"Input Optimization\">\n```javascript\n// Debounce search input\nfunction debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n// Throttle scroll events\nfunction throttle(func, limit) {\n  let inThrottle;\n  return function() {\n    const args = arguments;\n    const context = this;\n    if (!inThrottle) {\n      func.apply(context, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n// Usage\nconst searchInput = document.getElementById('search');\nconst handleSearch = debounce((event) => {\n  performSearch(event.target.value);\n}, 300);\n\nsearchInput.addEventListener('input', handleSearch);\n\nconst handleScroll = throttle(() => {\n  updateScrollProgress();\n}, 16); // ~60fps\n\nwindow.addEventListener('scroll', handleScroll);\n```\n\u003C/CodeBlock>\n\n### 3. Use Web Workers for Heavy Computations\n\n\u003CCodeBlock language=\"javascript\" title=\"Web Worker Implementation\">\n```javascript\n// main.js - Offload heavy work to Web Worker\nclass DataProcessor {\n  constructor() {\n    this.worker = new Worker('/workers/data-processor.js');\n    this.setupWorkerListeners();\n  }\n  \n  setupWorkerListeners() {\n    this.worker.onmessage = (event) => {\n      const { id, result, error } = event.data;\n      \n      if (error) {\n        this.rejectPromise(id, error);\n      } else {\n        this.resolvePromise(id, result);\n      }\n    };\n  }\n  \n  async processData(data) {\n    const id = generateUniqueId();\n    \n    return new Promise((resolve, reject) => {\n      this.storePromise(id, resolve, reject);\n      \n      this.worker.postMessage({\n        id,\n        type: 'PROCESS_DATA',\n        data\n      });\n    });\n  }\n}\n\n// workers/data-processor.js\nself.onmessage = function(event) {\n  const { id, type, data } = event.data;\n  \n  try {\n    let result;\n    \n    switch (type) {\n      case 'PROCESS_DATA':\n        result = performHeavyComputation(data);\n        break;\n      default:\n        throw new Error(`Unknown operation: ${type}`);\n    }\n    \n    self.postMessage({ id, result });\n  } catch (error) {\n    self.postMessage({ id, error: error.message });\n  }\n};\n\nfunction performHeavyComputation(data) {\n  // CPU-intensive work here\n  return data.map(item => complexTransformation(item));\n}\n```\n\u003C/CodeBlock>\n\n## Reducing Cumulative Layout Shift (CLS)\n\nPrevent unexpected layout shifts that frustrate users:\n\n### 1. Reserve Space for Dynamic Content\n\n\u003CCodeBlock language=\"css\" title=\"Aspect Ratio Containers\">\n```css\n/* Modern approach using aspect-ratio */\n.image-container {\n  aspect-ratio: 16 / 9;\n  overflow: hidden;\n}\n\n.image-container img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n/* Legacy approach with padding */\n.video-container {\n  position: relative;\n  padding-bottom: 56.25%; /* 16:9 aspect ratio */\n  height: 0;\n  overflow: hidden;\n}\n\n.video-container iframe {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n/* Reserve space for ads */\n.ad-container {\n  min-height: 250px;\n  background-color: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.ad-container::before {\n  content: 'Advertisement';\n  color: #999;\n  font-size: 14px;\n}\n```\n\u003C/CodeBlock>\n\n### 2. Optimize Font Loading\n\n\u003CCodeBlock language=\"css\" title=\"Font Loading Strategy\">\n```css\n/* Define fallback fonts with similar metrics */\n@font-face {\n  font-family: 'CustomFont';\n  src: url('/fonts/custom-font.woff2') format('woff2');\n  font-display: swap; /* Show fallback immediately, swap when ready */\n  font-weight: 400;\n  font-style: normal;\n}\n\n/* Size-adjust for better fallback matching */\n@font-face {\n  font-family: 'CustomFontFallback';\n  src: local('Arial'), local('Helvetica');\n  size-adjust: 110%; /* Adjust to match custom font metrics */\n}\n\n.text-content {\n  font-family: 'CustomFont', 'CustomFontFallback', Arial, sans-serif;\n}\n```\n\u003C/CodeBlock>\n\n### 3. Handle Dynamic Content Insertion\n\n\u003CCodeBlock language=\"javascript\" title=\"Layout-Stable Content Insertion\">\n```javascript\n// ❌ Causes layout shift\nfunction addNotification(message) {\n  const notification = document.createElement('div');\n  notification.textContent = message;\n  notification.className = 'notification';\n  document.body.prepend(notification);\n}\n\n// ✅ Layout-stable approach\nfunction addNotification(message) {\n  const container = document.getElementById('notification-container');\n  \n  if (!container) {\n    // Create fixed container that doesn't affect layout\n    const newContainer = document.createElement('div');\n    newContainer.id = 'notification-container';\n    newContainer.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 1000;\n      pointer-events: none;\n    `;\n    document.body.appendChild(newContainer);\n  }\n  \n  const notification = document.createElement('div');\n  notification.textContent = message;\n  notification.className = 'notification';\n  notification.style.pointerEvents = 'auto';\n  \n  container.appendChild(notification);\n  \n  // Animate in\n  notification.style.transform = 'translateX(100%)';\n  notification.style.transition = 'transform 0.3s ease';\n  \n  setTimeout(() => {\n    notification.style.transform = 'translateX(0)';\n  }, 10);\n}\n```\n\u003C/CodeBlock>\n\n## Advanced Performance Techniques\n\n### 1. Resource Prioritization\n\n\u003CCodeBlock language=\"html\" title=\"Resource Hints and Priorities\">\n```html\n\u003C!-- High priority resources -->\n\u003Clink rel=\"preload\" href=\"/api/critical-data\" as=\"fetch\" crossorigin>\n\u003Cscript src=\"/js/critical.js\" defer>\u003C/script>\n\n\u003C!-- Low priority resources -->\n\u003Clink rel=\"prefetch\" href=\"/js/non-critical.js\">\n\u003Clink rel=\"dns-prefetch\" href=\"//analytics.example.com\">\n\n\u003C!-- Module preloading -->\n\u003Clink rel=\"modulepreload\" href=\"/js/modules/router.js\">\n\u003Clink rel=\"modulepreload\" href=\"/js/modules/components.js\">\n```\n\u003C/CodeBlock>\n\n### 2. Efficient Caching Strategies\n\n\u003CCodeBlock language=\"javascript\" title=\"Service Worker Caching\">\n```javascript\n// sw.js - Service Worker with caching strategies\nconst CACHE_NAME = 'site-cache-v1';\nconst PRECACHE_URLS = [\n  '/',\n  '/css/critical.css',\n  '/js/app.js',\n  '/images/logo.svg'\n];\n\n// Install event - precache critical resources\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => cache.addAll(PRECACHE_URLS))\n  );\n});\n\n// Fetch event - implement caching strategies\nself.addEventListener('fetch', (event) => {\n  const { request } = event;\n  const url = new URL(request.url);\n  \n  // Cache first for static assets\n  if (request.destination === 'image' || request.destination === 'font') {\n    event.respondWith(\n      caches.match(request)\n        .then((response) => response || fetch(request))\n    );\n    return;\n  }\n  \n  // Network first for API calls\n  if (url.pathname.startsWith('/api/')) {\n    event.respondWith(\n      fetch(request)\n        .then((response) => {\n          if (response.ok) {\n            const responseClone = response.clone();\n            caches.open(CACHE_NAME)\n              .then((cache) => cache.put(request, responseClone));\n          }\n          return response;\n        })\n        .catch(() => caches.match(request))\n    );\n    return;\n  }\n  \n  // Stale while revalidate for HTML\n  event.respondWith(\n    caches.match(request)\n      .then((response) => {\n        const fetchPromise = fetch(request)\n          .then((networkResponse) => {\n            caches.open(CACHE_NAME)\n              .then((cache) => cache.put(request, networkResponse.clone()));\n            return networkResponse;\n          });\n        \n        return response || fetchPromise;\n      })\n  );\n});\n```\n\u003C/CodeBlock>\n\n### 3. Performance Monitoring\n\n\u003CCodeBlock language=\"javascript\" title=\"Performance Monitoring Setup\">\n```javascript\n// Performance monitoring utility\nclass PerformanceMonitor {\n  constructor() {\n    this.observer = null;\n    this.metrics = {};\n    this.setupObservers();\n  }\n  \n  setupObservers() {\n    // Core Web Vitals\n    this.observeCLS();\n    this.observeLCP();\n    this.observeFID();\n    this.observeINP();\n  }\n  \n  observeLCP() {\n    if ('PerformanceObserver' in window) {\n      const observer = new PerformanceObserver((entryList) => {\n        const entries = entryList.getEntries();\n        const lastEntry = entries[entries.length - 1];\n        \n        this.metrics.lcp = lastEntry.startTime;\n        this.reportMetric('LCP', lastEntry.startTime);\n      });\n      \n      observer.observe({ entryTypes: ['largest-contentful-paint'] });\n    }\n  }\n  \n  observeCLS() {\n    if ('PerformanceObserver' in window) {\n      let clsValue = 0;\n      \n      const observer = new PerformanceObserver((entryList) => {\n        for (const entry of entryList.getEntries()) {\n          if (!entry.hadRecentInput) {\n            clsValue += entry.value;\n          }\n        }\n        \n        this.metrics.cls = clsValue;\n        this.reportMetric('CLS', clsValue);\n      });\n      \n      observer.observe({ entryTypes: ['layout-shift'] });\n    }\n  }\n  \n  observeINP() {\n    if ('PerformanceObserver' in window) {\n      const observer = new PerformanceObserver((entryList) => {\n        for (const entry of entryList.getEntries()) {\n          const inp = entry.processingStart - entry.startTime;\n          \n          this.metrics.inp = Math.max(this.metrics.inp || 0, inp);\n          this.reportMetric('INP', inp);\n        }\n      });\n      \n      observer.observe({ entryTypes: ['event'] });\n    }\n  }\n  \n  reportMetric(name, value) {\n    // Send to analytics\n    if (window.gtag) {\n      gtag('event', name, {\n        event_category: 'Web Vitals',\n        value: Math.round(value),\n        non_interaction: true,\n      });\n    }\n    \n    // Or send to custom endpoint\n    fetch('/api/metrics', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        metric: name,\n        value: value,\n        url: window.location.href,\n        timestamp: Date.now()\n      })\n    }).catch(console.error);\n  }\n  \n  getMetrics() {\n    return { ...this.metrics };\n  }\n}\n\n// Initialize monitoring\nconst monitor = new PerformanceMonitor();\n\n// Report on page unload\nwindow.addEventListener('beforeunload', () => {\n  const metrics = monitor.getMetrics();\n  \n  // Use sendBeacon for reliable reporting\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon('/api/metrics/final', JSON.stringify(metrics));\n  }\n});\n```\n\u003C/CodeBlock>\n\n\u003CQuote author=\"Steve Souders\" source=\"High Performance Web Sites\" variant=\"large\">\n80-90% of the end-user response time is spent on the frontend. Start there.\n\u003C/Quote>\n\n## Performance Budget and Monitoring\n\nSet performance budgets to maintain fast experiences:\n\n\u003CCodeBlock language=\"json\" title=\"Performance Budget Configuration\">\n```json\n{\n  \"budgets\": [\n    {\n      \"type\": \"bundle\",\n      \"name\": \"initial\",\n      \"baseline\": \"50kb\",\n      \"maximum\": \"100kb\"\n    },\n    {\n      \"type\": \"asset\",\n      \"name\": \"images\",\n      \"baseline\": \"500kb\",\n      \"maximum\": \"1mb\"\n    }\n  ],\n  \"thresholds\": {\n    \"lcp\": 2500,\n    \"fid\": 100,\n    \"cls\": 0.1,\n    \"inp\": 200\n  }\n}\n```\n\u003C/CodeBlock>\n\n## Testing and Validation\n\nRegular performance testing ensures your optimizations work:\n\n\u003CCallout type=\"success\" title=\"Testing Tools\">\n- **Lab Tools**: Lighthouse, WebPageTest, Chrome DevTools\n- **Field Data**: Chrome UX Report, Real User Monitoring (RUM)\n- **Continuous Integration**: Lighthouse CI, SpeedCurve, Calibre\n\u003C/Callout>\n\n## Conclusion\n\nWeb performance optimization is an ongoing process that requires attention to multiple factors:\n\n1. **Measure First**: Use both lab and field data to identify bottlenecks\n2. **Prioritize Impact**: Focus on optimizations that improve Core Web Vitals\n3. **Test Continuously**: Implement performance monitoring and budgets\n4. **Think Holistically**: Consider the entire user experience, not just load times\n\nRemember that performance is not just about technical metrics—it's about creating smooth, responsive experiences that delight users and drive business results.\n\n\u003CCallout type=\"tip\" title=\"Quick Wins\">\nStart with these high-impact optimizations: optimize images, implement proper caching, eliminate render-blocking resources, and minimize JavaScript execution time.\n\u003C/Callout>\n\nThe web continues to evolve, and performance best practices evolve with it. Stay current with new specifications, browser features, and measurement techniques to ensure your sites remain fast and competitive.\n\n---\n\n*What performance challenges have you faced in your projects? Share your optimization wins and tools you've found most helpful!*","src/content/blog/web-performance-optimization.mdx","03e394348a9b77bb","web-performance-optimization.mdx","authors",["Map",128,129],"main-author",{"id":128,"data":130,"filePath":154,"digest":155},{"name":18,"bio":131,"longBio":132,"avatar":133,"email":134,"website":135,"social":136,"title":140,"company":141,"location":142,"expertise":143,"languages":151,"showInAuthorsList":27,"featured":27,"joinDate":153},"Full-stack developer passionate about web technologies, performance, and creating inclusive digital experiences.","Experienced full-stack developer with expertise in modern web technologies including TypeScript, React, and Node.js. Passionate about web performance, accessibility, and developer experience. Enjoys exploring new technologies and sharing knowledge with the community.","/images/profile-400.jpg","hello@salcastoro.com","https://salcastoro.com",{"twitter":137,"github":138,"linkedin":139},"s_castoro","scastoro","sal-castoro-3b1050178","Senior Frontend Developer","Independent","United States",[144,145,146,147,148,149,150],"JavaScript","TypeScript","React","Node.js","Web Performance","Accessibility","Astro",[152],"en","2024-01-01","src/content/authors/main-author.json","ee1251c9219fca1a"]